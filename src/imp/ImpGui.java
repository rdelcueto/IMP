/*
 * ImpGui.java Created on Mar 26, 2009, 5:56:38 PM
 * By: Rodrigo Gonz√°lez del Cueto
 *
 */

package imp;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImageOp;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import org.jdesktop.swingx.JXStatusBar;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JProgressBar;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Iterator;
import javax.imageio.*;
import javax.imageio.event.*;
import javax.imageio.stream.ImageInputStream;

/**
 * This class implements all of IMP's Graphic interface.
 * This interface was built using Netbeans' Matisse using classes from
 * Swing & SwingX libraries.
 * @author RdelCueto
 */
public class ImpGui extends javax.swing.JFrame {

    Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
    File imageFile = null;
    File imageFiles[] = null;
    File folder = null;

    /** Creates new form ImpGui */
    public ImpGui() {
        initComponents();
        try {
            BufferedImage icon = ImageIO.read(
                    this.getClass().getResource("imp_icon.png"));
            this.setIconImage(icon);
            System.out.println("Ready!");
        } catch (IOException e) {e.printStackTrace();}

        JXStatusBar.Constraint c1 = new JXStatusBar.Constraint(
                JXStatusBar.Constraint.ResizeBehavior.FIXED);
        c1.setFixedWidth(256);

        JXStatusBar.Constraint c2 = new JXStatusBar.Constraint(
                JXStatusBar.Constraint.ResizeBehavior.FILL);
        
        statusLabel.setVerticalAlignment(SwingConstants.TOP);
        impStatusBar.add(statusLabel, c1);
        impStatusBar.add(pbar, c2);

        try {
            imagePanel.setImage(ImageIO.read(
                    this.getClass().getResource("imp_bg.png")));
            changeWindowSize(imagePanel.getImage().getWidth(null),
                    imagePanel.getImage().getHeight(null));
        } catch (IOException e) {e.printStackTrace();}
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        aboutFrame = new javax.swing.JFrame();
        aboutPanel = new javax.swing.JPanel();
        frameContentPanel1 = new javax.swing.JPanel();
        aboutScroll = new javax.swing.JScrollPane();
        aboutText = new javax.swing.JTextArea();
        aboutTitle = new javax.swing.JLabel();
        aboutClose = new javax.swing.JButton();
        fileChooser = new javax.swing.JFileChooser();
        fileChooserB = new javax.swing.JFileChooser();
        bncFrame = new javax.swing.JFrame();
        bncContent = new javax.swing.JPanel();
        bbncPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        bbncText = new javax.swing.JTextField();
        bbncSlider = new javax.swing.JSlider();
        cbncPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cbncText = new javax.swing.JTextField();
        cbncSlider = new javax.swing.JSlider();
        bncApplyButton = new javax.swing.JButton();
        bncCancelButton = new javax.swing.JButton();
        bncTitle = new javax.swing.JLabel();
        colorFrame = new javax.swing.JFrame();
        colorPanel = new javax.swing.JPanel();
        greenPanel = new javax.swing.JPanel();
        greenText = new javax.swing.JTextField();
        greenSlider = new javax.swing.JSlider();
        greenLabel = new javax.swing.JLabel();
        colorApplyButton = new javax.swing.JButton();
        redPanel = new javax.swing.JPanel();
        redLabel = new javax.swing.JLabel();
        redSlider = new javax.swing.JSlider();
        redText = new javax.swing.JTextField();
        bluePanel = new javax.swing.JPanel();
        blueText = new javax.swing.JTextField();
        blueLabel = new javax.swing.JLabel();
        blueSlider = new javax.swing.JSlider();
        colorTitle = new javax.swing.JLabel();
        colorCancelButton = new javax.swing.JButton();
        mosaicFrame = new javax.swing.JFrame();
        mosaicContent = new javax.swing.JPanel();
        mosaicPanel = new javax.swing.JPanel();
        hSizeMosaicLabel = new javax.swing.JLabel();
        hSizeMosaicText = new javax.swing.JTextField();
        vSizeMosaicLabel = new javax.swing.JLabel();
        vSizeMosaicText = new javax.swing.JTextField();
        hpxLabel = new javax.swing.JLabel();
        vpxLabel = new javax.swing.JLabel();
        mosaicApplyButton = new javax.swing.JButton();
        mosaicCancelButton = new javax.swing.JButton();
        mosaicTitle = new javax.swing.JLabel();
        recurMosaicFrame = new javax.swing.JFrame();
        recurMosaicContent = new javax.swing.JPanel();
        recurMosaicPanel = new javax.swing.JPanel();
        recurMosaicIScaleLabel = new javax.swing.JLabel();
        recurMosaicMScaleLabel = new javax.swing.JLabel();
        recurMosaicPCentLabel1 = new javax.swing.JLabel();
        recurMosaicIScaleText = new javax.swing.JTextField();
        recurMosaicMScaleText = new javax.swing.JTextField();
        recurMosaicPCentLabel2 = new javax.swing.JLabel();
        recurMosaicApplyButton = new javax.swing.JButton();
        recurMosaicCancelButton = new javax.swing.JButton();
        recurMosaicTitle = new javax.swing.JLabel();
        colorChooser = new javax.swing.JColorChooser();
        exportAsciiImgFrame = new javax.swing.JFrame();
        exportPanel = new javax.swing.JPanel();
        exportOkAsciiButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        exportPxRatioLabel = new javax.swing.JLabel();
        exportWebSave = new javax.swing.JCheckBox();
        exportColor = new javax.swing.JCheckBox();
        exportTitle2 = new javax.swing.JLabel();
        exportPxRatio = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        exportOkAsciiButton = new javax.swing.JButton();
        exportMapList = new javax.swing.JComboBox();
        exportTitle = new javax.swing.JLabel();
        exportMapLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        exportOkTextButton = new javax.swing.JButton();
        exportTitle1 = new javax.swing.JLabel();
        exportMsgLabel = new javax.swing.JLabel();
        exportText = new javax.swing.JTextField();
        layerOptionFrame = new javax.swing.JFrame();
        layerOptionPanel = new javax.swing.JPanel();
        layerOptionText = new javax.swing.JLabel();
        layerBlendOption = new javax.swing.JComboBox();
        layerOptionText1 = new javax.swing.JLabel();
        layerOpacySlider = new javax.swing.JSlider();
        waveFrame = new javax.swing.JFrame();
        wavePanel = new javax.swing.JPanel();
        waveOptionPanel = new javax.swing.JPanel();
        waveFreqLabel = new javax.swing.JLabel();
        waveTitle = new javax.swing.JLabel();
        waveAmp = new javax.swing.JLabel();
        freqSlider = new javax.swing.JSlider();
        amplitudeSlider = new javax.swing.JSlider();
        waveOkButton = new javax.swing.JButton();
        waveCancelButton = new javax.swing.JButton();
        imgMosaicFrame = new javax.swing.JFrame();
        imgMosaicPanel = new javax.swing.JPanel();
        imgMosaicOptions = new javax.swing.JPanel();
        imgMosaicProcessMosaic = new javax.swing.JButton();
        imgMosaicScaleLabel = new javax.swing.JLabel();
        imgMosaicJitterAmount = new javax.swing.JSlider();
        imgMosaicJitterLabel = new javax.swing.JLabel();
        imgMosaicBlendCheck = new javax.swing.JCheckBox();
        imgMosaicBlendAmount = new javax.swing.JSlider();
        imgMosaicScaleText = new javax.swing.JTextField();
        imgMosaicPreOptions = new javax.swing.JPanel();
        imgMosaicHeight = new javax.swing.JTextField();
        imgMosaicWidth = new javax.swing.JTextField();
        imgMosaicHeightLabel = new javax.swing.JLabel();
        imgMosaicWidthLabel = new javax.swing.JLabel();
        imgMosaicProcessImg = new javax.swing.JButton();
        imgMosaicFrameTitle = new javax.swing.JLabel();
        imgMosaicCancel = new javax.swing.JButton();
        oilPaintFrame = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        oilPaintOkButton = new javax.swing.JButton();
        oilPaintPanel = new javax.swing.JPanel();
        oiloPaintPaletteLabel = new javax.swing.JLabel();
        oilPaintSizeLabel = new javax.swing.JLabel();
        oilPaintPalette = new javax.swing.JTextField();
        oilPaintBrushSize = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        oilPaintPasses = new javax.swing.JSlider();
        oilPaintPassesLabel = new javax.swing.JLabel();
        oilPaintCancelButton = new javax.swing.JButton();
        resizeFrame = new javax.swing.JFrame();
        resizePanel = new javax.swing.JPanel();
        resizeCancelButton = new javax.swing.JButton();
        resizeOkButton = new javax.swing.JButton();
        resizeOptionPanel = new javax.swing.JPanel();
        resizeHeightpC = new javax.swing.JTextField();
        resizeAspectCheck = new javax.swing.JCheckBox();
        resizeWidthLabel = new javax.swing.JLabel();
        resizeHeightLabel = new javax.swing.JLabel();
        resizeWidthpC = new javax.swing.JTextField();
        resizeWidth = new javax.swing.JTextField();
        resizeWpcLabel = new javax.swing.JLabel();
        resizeHpcLabel = new javax.swing.JLabel();
        resizeHeight = new javax.swing.JTextField();
        resizeTitle = new javax.swing.JLabel();
        posterizeFrame = new javax.swing.JFrame();
        ditherTonesApplyButton = new javax.swing.JButton();
        ditherTonesCancelButton = new javax.swing.JButton();
        ditherTonesTitlePanel = new javax.swing.JPanel();
        grayPosterizeTitle = new javax.swing.JLabel();
        ditherTonesOptionBPanel = new javax.swing.JPanel();
        ditherOptionButton = new javax.swing.JRadioButton();
        halfCircleOptionButton = new javax.swing.JRadioButton();
        halfLineOptionButton = new javax.swing.JRadioButton();
        dithergOptionButton = new javax.swing.JRadioButton();
        patternSizeText = new javax.swing.JTextField();
        patternSize = new javax.swing.JLabel();
        noDitherOptionButton = new javax.swing.JRadioButton();
        impStatusBar = new org.jdesktop.swingx.JXStatusBar();
        scrollPanel = new javax.swing.JScrollPane();
        imageFrame = new javax.swing.JPanel();
        imagePanel = new org.jdesktop.swingx.JXImagePanel();
        ImpMenuBar = new javax.swing.JMenuBar();
        fileMenuItem = new javax.swing.JMenu();
        openItem = new javax.swing.JMenuItem();
        saveItem = new javax.swing.JMenuItem();
        saveAsItem = new javax.swing.JMenuItem();
        exportMenuItem = new javax.swing.JMenu();
        exportAsciiItem = new javax.swing.JMenuItem();
        asciiStereogramItem = new javax.swing.JMenuItem();
        stereogramItem = new javax.swing.JMenuItem();
        imageMosaicItem = new javax.swing.JMenuItem();
        exitItem = new javax.swing.JMenuItem();
        editMenuItem = new javax.swing.JMenu();
        undoItem = new javax.swing.JMenuItem();
        redoItem = new javax.swing.JMenuItem();
        transMenuItem = new javax.swing.JMenu();
        rotateCWItem = new javax.swing.JMenuItem();
        rotateCCWItem = new javax.swing.JMenuItem();
        rotate180Item = new javax.swing.JMenuItem();
        flipHItem = new javax.swing.JMenuItem();
        flipVItem = new javax.swing.JMenuItem();
        resizeLayerItem = new javax.swing.JMenuItem();
        filtersMenuItem = new javax.swing.JMenu();
        brightNContrastItem = new javax.swing.JMenuItem();
        colorBalanceItem = new javax.swing.JMenuItem();
        colorizeItem = new javax.swing.JMenuItem();
        invertItem = new javax.swing.JMenuItem();
        desaturateItem = new javax.swing.JMenuItem();
        bwItem = new javax.swing.JMenuItem();
        ditherTonesItem = new javax.swing.JMenuItem();
        blurMenuItem = new javax.swing.JMenu();
        blurItem = new javax.swing.JMenuItem();
        moreBlurItem = new javax.swing.JMenuItem();
        sharpenMenuItem = new javax.swing.JMenu();
        sharpenItem = new javax.swing.JMenuItem();
        moreSharpenItem = new javax.swing.JMenuItem();
        unSharpMask = new javax.swing.JMenuItem();
        effectMenuItem = new javax.swing.JMenu();
        mosaicItem = new javax.swing.JMenuItem();
        recMosaicItem = new javax.swing.JMenuItem();
        waterEffectItem = new javax.swing.JMenuItem();
        oilEffectItem = new javax.swing.JMenuItem();
        edgeDetectItem = new javax.swing.JMenuItem();
        motionBlurItem = new javax.swing.JMenuItem();
        embossItem = new javax.swing.JMenuItem();
        viewMenuItem = new javax.swing.JMenu();
        zoomInItem = new javax.swing.JMenuItem();
        zoomOutItem = new javax.swing.JMenuItem();
        zoomFitItem = new javax.swing.JMenuItem();
        zoom11Item = new javax.swing.JMenuItem();
        layerMenuItem = new javax.swing.JMenu();
        dupLayerItem = new javax.swing.JMenuItem();
        delLayerItem = new javax.swing.JMenuItem();
        toggleVisLayerItem = new javax.swing.JMenuItem();
        nLayerItem = new javax.swing.JMenuItem();
        pLayerItem = new javax.swing.JMenuItem();
        upLayerItem = new javax.swing.JMenuItem();
        downLayerItem = new javax.swing.JMenuItem();
        mergeDownItem = new javax.swing.JMenuItem();
        flatten2LayerItem = new javax.swing.JMenuItem();
        flattenMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenu();
        aboutItem = new javax.swing.JMenuItem();
        funcTestItem = new javax.swing.JMenuItem();

        aboutFrame.setMinimumSize(new java.awt.Dimension(386, 212));
        aboutFrame.setResizable(false);
        aboutFrame.setUndecorated(true);

        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorder1 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorder1.setShowLeftShadow(true);
        dropShadowBorder1.setShowTopShadow(true);
        aboutPanel.setBorder(dropShadowBorder1);

        frameContentPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        aboutScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        aboutScroll.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        aboutText.setColumns(20);
        aboutText.setEditable(false);
        aboutText.setLineWrap(true);
        aboutText.setRows(5);
        aboutText.setText("IMP is an image manipulation program written in Java.\n\nAuthor: Rodrigo Gonz√°lez del Cueto\nContact: rdelcueto@ciencias.unam.mx\nUsed Packages: SwingX, IM4Java and Simon Levy's KDTree Structure Implementation");
        aboutText.setWrapStyleWord(true);
        aboutText.setBorder(null);
        aboutScroll.setViewportView(aboutText);

        javax.swing.GroupLayout frameContentPanel1Layout = new javax.swing.GroupLayout(frameContentPanel1);
        frameContentPanel1.setLayout(frameContentPanel1Layout);
        frameContentPanel1Layout.setHorizontalGroup(
            frameContentPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(aboutScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
        );
        frameContentPanel1Layout.setVerticalGroup(
            frameContentPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(aboutScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
        );

        aboutTitle.setFont(new java.awt.Font("DejaVu Sans", 3, 14));
        aboutTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        aboutTitle.setText("About IMP");
        aboutTitle.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        aboutClose.setText("Close");
        aboutClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout aboutPanelLayout = new javax.swing.GroupLayout(aboutPanel);
        aboutPanel.setLayout(aboutPanelLayout);
        aboutPanelLayout.setHorizontalGroup(
            aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(frameContentPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(aboutTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                    .addComponent(aboutClose, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE))
                .addContainerGap())
        );
        aboutPanelLayout.setVerticalGroup(
            aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(aboutTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(frameContentPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aboutClose)
                .addContainerGap())
        );

        javax.swing.GroupLayout aboutFrameLayout = new javax.swing.GroupLayout(aboutFrame.getContentPane());
        aboutFrame.getContentPane().setLayout(aboutFrameLayout);
        aboutFrameLayout.setHorizontalGroup(
            aboutFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(aboutPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        aboutFrameLayout.setVerticalGroup(
            aboutFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(aboutPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        fileChooser.setCurrentDirectory(new java.io.File("/home/seltix"));

        fileChooserB.setCurrentDirectory(new java.io.File("/home/seltix"));
        fileChooserB.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        bncFrame.setAlwaysOnTop(true);
        bncFrame.setMinimumSize(new java.awt.Dimension(227, 312));
        bncFrame.setName("bncFrame"); // NOI18N
        bncFrame.setResizable(false);
        bncFrame.setUndecorated(true);

        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorder2 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorder2.setShowLeftShadow(true);
        dropShadowBorder2.setShowTopShadow(true);
        bncContent.setBorder(dropShadowBorder2);

        bbncPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Brightness Level");

        bbncText.setFont(new java.awt.Font("DejaVu Sans", 0, 8));
        bbncText.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        bbncText.setText("0%");
        bbncText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bbncTextActionPerformed(evt);
            }
        });

        bbncSlider.setFont(new java.awt.Font("DejaVu Sans", 0, 8));
        bbncSlider.setMajorTickSpacing(10);
        bbncSlider.setMinimum(-100);
        bbncSlider.setMinorTickSpacing(5);
        bbncSlider.setPaintTicks(true);
        bbncSlider.setValue(0);
        bbncSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                bbncSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout bbncPanelLayout = new javax.swing.GroupLayout(bbncPanel);
        bbncPanel.setLayout(bbncPanelLayout);
        bbncPanelLayout.setHorizontalGroup(
            bbncPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bbncPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bbncPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bbncSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                    .addGroup(bbncPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bbncText, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        bbncPanelLayout.setVerticalGroup(
            bbncPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bbncPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bbncPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bbncText)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bbncSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        cbncPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setText("Contrast Level");

        cbncText.setFont(new java.awt.Font("DejaVu Sans", 0, 8));
        cbncText.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        cbncText.setText("0%");
        cbncText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbncTextActionPerformed(evt);
            }
        });

        cbncSlider.setFont(new java.awt.Font("DejaVu Sans", 0, 8));
        cbncSlider.setMajorTickSpacing(10);
        cbncSlider.setMinimum(-100);
        cbncSlider.setMinorTickSpacing(5);
        cbncSlider.setPaintTicks(true);
        cbncSlider.setValue(0);
        cbncSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cbncSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout cbncPanelLayout = new javax.swing.GroupLayout(cbncPanel);
        cbncPanel.setLayout(cbncPanelLayout);
        cbncPanelLayout.setHorizontalGroup(
            cbncPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cbncPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cbncPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbncSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                    .addGroup(cbncPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addComponent(cbncText, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        cbncPanelLayout.setVerticalGroup(
            cbncPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cbncPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cbncPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbncText, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cbncSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        bncApplyButton.setText("Apply");
        bncApplyButton.setPreferredSize(new java.awt.Dimension(59, 33));
        bncApplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bncApplyButtonActionPerformed(evt);
            }
        });

        bncCancelButton.setText("Cancel");
        bncCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bncCancelButtonActionPerformed(evt);
            }
        });

        bncTitle.setFont(new java.awt.Font("DejaVu Sans", 3, 14));
        bncTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bncTitle.setText("Brightness n' Contrast");
        bncTitle.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout bncContentLayout = new javax.swing.GroupLayout(bncContent);
        bncContent.setLayout(bncContentLayout);
        bncContentLayout.setHorizontalGroup(
            bncContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bncContentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bncContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(bncContentLayout.createSequentialGroup()
                        .addComponent(bncApplyButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bncCancelButton))
                    .addComponent(bncTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bbncPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbncPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        bncContentLayout.setVerticalGroup(
            bncContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bncContentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bncTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bbncPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbncPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bncContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bncApplyButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bncCancelButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout bncFrameLayout = new javax.swing.GroupLayout(bncFrame.getContentPane());
        bncFrame.getContentPane().setLayout(bncFrameLayout);
        bncFrameLayout.setHorizontalGroup(
            bncFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bncContent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        bncFrameLayout.setVerticalGroup(
            bncFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bncContent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        colorFrame.setAlwaysOnTop(true);
        colorFrame.setMinimumSize(new java.awt.Dimension(256, 461));
        colorFrame.setName("bncFrame"); // NOI18N
        colorFrame.setResizable(false);
        colorFrame.setUndecorated(true);

        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorder3 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorder3.setShowLeftShadow(true);
        dropShadowBorder3.setShowTopShadow(true);
        colorPanel.setBorder(dropShadowBorder3);

        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorder4 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorder4.setShadowColor(new java.awt.Color(17, 255, 0));
        dropShadowBorder4.setShowLeftShadow(true);
        dropShadowBorder4.setShowTopShadow(true);
        greenPanel.setBorder(dropShadowBorder4);

        greenText.setFont(new java.awt.Font("DejaVu Sans", 0, 8));
        greenText.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        greenText.setText("0%");
        greenText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTextActionPerformed(evt);
            }
        });

        greenSlider.setFont(new java.awt.Font("DejaVu Sans", 0, 8));
        greenSlider.setMajorTickSpacing(10);
        greenSlider.setMinimum(-100);
        greenSlider.setMinorTickSpacing(5);
        greenSlider.setPaintTicks(true);
        greenSlider.setValue(0);
        greenSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                greenSliderStateChanged(evt);
            }
        });

        greenLabel.setText("Green Level");

        javax.swing.GroupLayout greenPanelLayout = new javax.swing.GroupLayout(greenPanel);
        greenPanel.setLayout(greenPanelLayout);
        greenPanelLayout.setHorizontalGroup(
            greenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(greenPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(greenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(greenSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, greenPanelLayout.createSequentialGroup()
                        .addComponent(greenLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                        .addComponent(greenText, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        greenPanelLayout.setVerticalGroup(
            greenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(greenPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(greenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(greenLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(greenText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(greenSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        colorApplyButton.setText("Apply");
        colorApplyButton.setMinimumSize(new java.awt.Dimension(59, 33));
        colorApplyButton.setPreferredSize(new java.awt.Dimension(59, 33));
        colorApplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorApplyButtonActionPerformed(evt);
            }
        });

        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorder5 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorder5.setShadowColor(new java.awt.Color(255, 0, 0));
        dropShadowBorder5.setShowLeftShadow(true);
        dropShadowBorder5.setShowTopShadow(true);
        redPanel.setBorder(dropShadowBorder5);

        redLabel.setText("Red Level");
        redLabel.setBorder(null);

        redSlider.setFont(new java.awt.Font("DejaVu Sans", 0, 8));
        redSlider.setMajorTickSpacing(10);
        redSlider.setMinimum(-100);
        redSlider.setMinorTickSpacing(5);
        redSlider.setPaintTicks(true);
        redSlider.setValue(0);
        redSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                redSliderStateChanged(evt);
            }
        });

        redText.setFont(new java.awt.Font("DejaVu Sans", 0, 8));
        redText.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        redText.setText("0%");
        redText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout redPanelLayout = new javax.swing.GroupLayout(redPanel);
        redPanel.setLayout(redPanelLayout);
        redPanelLayout.setHorizontalGroup(
            redPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(redPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(redPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(redSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                    .addGroup(redPanelLayout.createSequentialGroup()
                        .addComponent(redLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                        .addComponent(redText, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        redPanelLayout.setVerticalGroup(
            redPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(redPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(redPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(redLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(redText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(redSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorder6 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorder6.setShadowColor(new java.awt.Color(0, 29, 255));
        dropShadowBorder6.setShowLeftShadow(true);
        dropShadowBorder6.setShowTopShadow(true);
        bluePanel.setBorder(dropShadowBorder6);

        blueText.setFont(new java.awt.Font("DejaVu Sans", 0, 8));
        blueText.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        blueText.setText("0%");
        blueText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blueTextActionPerformed(evt);
            }
        });

        blueLabel.setText("Blue Level");

        blueSlider.setFont(new java.awt.Font("DejaVu Sans", 0, 8));
        blueSlider.setMajorTickSpacing(10);
        blueSlider.setMinimum(-100);
        blueSlider.setMinorTickSpacing(5);
        blueSlider.setPaintTicks(true);
        blueSlider.setValue(0);
        blueSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                blueSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout bluePanelLayout = new javax.swing.GroupLayout(bluePanel);
        bluePanel.setLayout(bluePanelLayout);
        bluePanelLayout.setHorizontalGroup(
            bluePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bluePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bluePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(blueSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bluePanelLayout.createSequentialGroup()
                        .addComponent(blueLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                        .addComponent(blueText, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        bluePanelLayout.setVerticalGroup(
            bluePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bluePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bluePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(blueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(blueText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blueSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        colorTitle.setFont(new java.awt.Font("DejaVu Sans", 3, 14));
        colorTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        colorTitle.setText("Color Balance");
        colorTitle.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        colorCancelButton.setText("Cancel");
        colorCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorCancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout colorPanelLayout = new javax.swing.GroupLayout(colorPanel);
        colorPanel.setLayout(colorPanelLayout);
        colorPanelLayout.setHorizontalGroup(
            colorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(colorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(greenPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(colorTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                    .addComponent(redPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(colorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, colorPanelLayout.createSequentialGroup()
                            .addComponent(colorApplyButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(colorCancelButton))
                        .addComponent(bluePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        colorPanelLayout.setVerticalGroup(
            colorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(colorTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(redPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(greenPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 116, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bluePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 117, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colorApplyButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(colorCancelButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout colorFrameLayout = new javax.swing.GroupLayout(colorFrame.getContentPane());
        colorFrame.getContentPane().setLayout(colorFrameLayout);
        colorFrameLayout.setHorizontalGroup(
            colorFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(colorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        colorFrameLayout.setVerticalGroup(
            colorFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(colorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        mosaicFrame.setAlwaysOnTop(true);
        mosaicFrame.setMinimumSize(new java.awt.Dimension(263, 177));
        mosaicFrame.setName("bncFrame"); // NOI18N
        mosaicFrame.setResizable(false);
        mosaicFrame.setUndecorated(true);

        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorder7 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorder7.setShowLeftShadow(true);
        dropShadowBorder7.setShowTopShadow(true);
        mosaicContent.setBorder(dropShadowBorder7);

        mosaicPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        hSizeMosaicLabel.setText("Horizontal Size");

        hSizeMosaicText.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        hSizeMosaicText.setText("10");

        vSizeMosaicLabel.setText("Vertical Size");

        vSizeMosaicText.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        vSizeMosaicText.setText("10");

        hpxLabel.setText("px");

        vpxLabel.setText("px");

        javax.swing.GroupLayout mosaicPanelLayout = new javax.swing.GroupLayout(mosaicPanel);
        mosaicPanel.setLayout(mosaicPanelLayout);
        mosaicPanelLayout.setHorizontalGroup(
            mosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mosaicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hSizeMosaicLabel)
                    .addComponent(vSizeMosaicLabel))
                .addGap(18, 18, 18)
                .addGroup(mosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(vSizeMosaicText, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                    .addComponent(hSizeMosaicText, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(mosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(vpxLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(hpxLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        mosaicPanelLayout.setVerticalGroup(
            mosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mosaicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mosaicPanelLayout.createSequentialGroup()
                        .addGroup(mosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hSizeMosaicText, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hpxLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(vSizeMosaicText, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(vpxLabel)))
                    .addGroup(mosaicPanelLayout.createSequentialGroup()
                        .addComponent(hSizeMosaicLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(vSizeMosaicLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mosaicApplyButton.setText("Apply");
        mosaicApplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mosaicApplyButtonActionPerformed(evt);
            }
        });

        mosaicCancelButton.setText("Cancel");
        mosaicCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mosaicCancelButtonActionPerformed(evt);
            }
        });

        mosaicTitle.setFont(new java.awt.Font("DejaVu Sans", 3, 14));
        mosaicTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mosaicTitle.setText("Mosaic Parameters");
        mosaicTitle.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout mosaicContentLayout = new javax.swing.GroupLayout(mosaicContent);
        mosaicContent.setLayout(mosaicContentLayout);
        mosaicContentLayout.setHorizontalGroup(
            mosaicContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mosaicContentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mosaicContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mosaicPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mosaicContentLayout.createSequentialGroup()
                        .addComponent(mosaicApplyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 119, Short.MAX_VALUE)
                        .addComponent(mosaicCancelButton))
                    .addComponent(mosaicTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        mosaicContentLayout.setVerticalGroup(
            mosaicContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mosaicContentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mosaicTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mosaicPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(mosaicContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mosaicApplyButton)
                    .addComponent(mosaicCancelButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout mosaicFrameLayout = new javax.swing.GroupLayout(mosaicFrame.getContentPane());
        mosaicFrame.getContentPane().setLayout(mosaicFrameLayout);
        mosaicFrameLayout.setHorizontalGroup(
            mosaicFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mosaicContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        mosaicFrameLayout.setVerticalGroup(
            mosaicFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mosaicContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        recurMosaicFrame.setAlwaysOnTop(true);
        recurMosaicFrame.setMinimumSize(new java.awt.Dimension(228, 178));
        recurMosaicFrame.setName("bncFrame"); // NOI18N
        recurMosaicFrame.setResizable(false);
        recurMosaicFrame.setUndecorated(true);

        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorder8 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorder8.setShowLeftShadow(true);
        dropShadowBorder8.setShowTopShadow(true);
        recurMosaicContent.setBorder(dropShadowBorder8);

        recurMosaicPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        recurMosaicIScaleLabel.setText("Image Scale");

        recurMosaicMScaleLabel.setText("Mosaic Scale");

        recurMosaicPCentLabel1.setText("%");

        recurMosaicIScaleText.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        recurMosaicIScaleText.setText("100");

        recurMosaicMScaleText.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        recurMosaicMScaleText.setText("10");

        recurMosaicPCentLabel2.setText("%");

        javax.swing.GroupLayout recurMosaicPanelLayout = new javax.swing.GroupLayout(recurMosaicPanel);
        recurMosaicPanel.setLayout(recurMosaicPanelLayout);
        recurMosaicPanelLayout.setHorizontalGroup(
            recurMosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, recurMosaicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(recurMosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(recurMosaicIScaleLabel)
                    .addComponent(recurMosaicMScaleLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(recurMosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(recurMosaicIScaleText, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addComponent(recurMosaicMScaleText, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(recurMosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(recurMosaicPCentLabel2)
                    .addComponent(recurMosaicPCentLabel1))
                .addContainerGap())
        );
        recurMosaicPanelLayout.setVerticalGroup(
            recurMosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(recurMosaicPanelLayout.createSequentialGroup()
                .addGroup(recurMosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(recurMosaicPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(recurMosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(recurMosaicPCentLabel1)
                            .addComponent(recurMosaicIScaleText, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(recurMosaicPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(recurMosaicIScaleLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(recurMosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(recurMosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(recurMosaicPCentLabel2)
                        .addComponent(recurMosaicMScaleText, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(recurMosaicPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(recurMosaicMScaleLabel)))
                .addContainerGap())
        );

        recurMosaicApplyButton.setText("Apply");
        recurMosaicApplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recurMosaicApplyButtonActionPerformed(evt);
            }
        });

        recurMosaicCancelButton.setText("Cancel");
        recurMosaicCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recurMosaicCancelButtonActionPerformed(evt);
            }
        });

        recurMosaicTitle.setFont(new java.awt.Font("DejaVu Sans", 3, 14));
        recurMosaicTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        recurMosaicTitle.setText("Recursive Mosaic");
        recurMosaicTitle.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout recurMosaicContentLayout = new javax.swing.GroupLayout(recurMosaicContent);
        recurMosaicContent.setLayout(recurMosaicContentLayout);
        recurMosaicContentLayout.setHorizontalGroup(
            recurMosaicContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(recurMosaicContentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(recurMosaicContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(recurMosaicContentLayout.createSequentialGroup()
                        .addComponent(recurMosaicApplyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(recurMosaicCancelButton))
                    .addComponent(recurMosaicTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(recurMosaicPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        recurMosaicContentLayout.setVerticalGroup(
            recurMosaicContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, recurMosaicContentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(recurMosaicTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(recurMosaicPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(recurMosaicContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recurMosaicApplyButton)
                    .addComponent(recurMosaicCancelButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout recurMosaicFrameLayout = new javax.swing.GroupLayout(recurMosaicFrame.getContentPane());
        recurMosaicFrame.getContentPane().setLayout(recurMosaicFrameLayout);
        recurMosaicFrameLayout.setHorizontalGroup(
            recurMosaicFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(recurMosaicContent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        recurMosaicFrameLayout.setVerticalGroup(
            recurMosaicFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(recurMosaicContent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        colorChooser.setOpaque(true);
        colorChooser.setDoubleBuffered(true);

        exportAsciiImgFrame.setTitle("Export Settings");
        exportAsciiImgFrame.setAlwaysOnTop(true);
        exportAsciiImgFrame.setMinimumSize(new java.awt.Dimension(262, 435));
        exportAsciiImgFrame.setResizable(false);
        exportAsciiImgFrame.setUndecorated(true);

        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorder9 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorder9.setShowLeftShadow(true);
        dropShadowBorder9.setShowTopShadow(true);
        exportPanel.setBorder(dropShadowBorder9);

        exportOkAsciiButton1.setText("Cancel");
        exportOkAsciiButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportOkAsciiButton1ActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        exportPxRatioLabel.setText("Pixel Ratio");

        exportWebSave.setText("Web-save Palette");
        exportWebSave.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);

        exportColor.setText("Color");

        exportTitle2.setFont(new java.awt.Font("DejaVu Sans", 3, 13));
        exportTitle2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exportTitle2.setText("Basic Export Settings");

        exportPxRatio.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        exportPxRatio.setText("8");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(exportTitle2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(exportPxRatio, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                            .addComponent(exportColor))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(exportPxRatioLabel)
                                .addGap(68, 68, 68))
                            .addComponent(exportWebSave))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exportTitle2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportPxRatio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportPxRatioLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportColor)
                    .addComponent(exportWebSave))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        exportOkAsciiButton.setText("OK");
        exportOkAsciiButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportOkAsciiButtonActionPerformed(evt);
            }
        });

        exportMapList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ".:+j6bHM", ".:coC08@", ".:icuoeCUO0GS8@", ".'~:;!>+=icjtJY56SXDQKHNWM", "#" }));

        exportTitle.setFont(new java.awt.Font("DejaVu Sans", 3, 13));
        exportTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exportTitle.setText("Export 2 Ascii Map");

        exportMapLabel.setText("Choose an Ascii Map:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(exportTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(exportMapLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exportOkAsciiButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(exportMapList, 0, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exportTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportMapLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportOkAsciiButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportMapList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        exportOkTextButton.setText("OK");
        exportOkTextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportOkTextButtonActionPerformed(evt);
            }
        });

        exportTitle1.setFont(new java.awt.Font("DejaVu Sans", 3, 13));
        exportTitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exportTitle1.setText("Emblemed Message");

        exportMsgLabel.setText("Write a message:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(exportText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(exportTitle1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(exportMsgLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addComponent(exportOkTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exportTitle1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportMsgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportOkTextButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout exportPanelLayout = new javax.swing.GroupLayout(exportPanel);
        exportPanel.setLayout(exportPanelLayout);
        exportPanelLayout.setHorizontalGroup(
            exportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(exportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, exportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(exportOkAsciiButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, 0, 228, Short.MAX_VALUE)))
                .addContainerGap())
        );
        exportPanelLayout.setVerticalGroup(
            exportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, Short.MAX_VALUE)
                .addGap(2, 2, 2)
                .addComponent(exportOkAsciiButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout exportAsciiImgFrameLayout = new javax.swing.GroupLayout(exportAsciiImgFrame.getContentPane());
        exportAsciiImgFrame.getContentPane().setLayout(exportAsciiImgFrameLayout);
        exportAsciiImgFrameLayout.setHorizontalGroup(
            exportAsciiImgFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(exportPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        exportAsciiImgFrameLayout.setVerticalGroup(
            exportAsciiImgFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(exportPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        layerOptionFrame.setAlwaysOnTop(true);
        layerOptionFrame.setMinimumSize(new java.awt.Dimension(164, 150));
        layerOptionFrame.setUndecorated(true);

        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorder10 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorder10.setShowLeftShadow(true);
        dropShadowBorder10.setShowTopShadow(true);
        layerOptionPanel.setBorder(dropShadowBorder10);
        layerOptionPanel.setMinimumSize(new java.awt.Dimension(164, 150));

        layerOptionText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        layerOptionText.setText("Blending Mode");

        layerBlendOption.setFont(new java.awt.Font("DejaVu Sans", 0, 10));
        layerBlendOption.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Normal", "Add", "Substract", "Multiply", "Divide" }));

        layerOptionText1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        layerOptionText1.setText("Layer Opacy");

        layerOpacySlider.setFont(new java.awt.Font("DejaVu Sans", 0, 8));
        layerOpacySlider.setValue(100);

        javax.swing.GroupLayout layerOptionPanelLayout = new javax.swing.GroupLayout(layerOptionPanel);
        layerOptionPanel.setLayout(layerOptionPanelLayout);
        layerOptionPanelLayout.setHorizontalGroup(
            layerOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layerOptionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layerOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(layerOpacySlider, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                    .addComponent(layerOptionText1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(layerBlendOption, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(layerOptionText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layerOptionPanelLayout.setVerticalGroup(
            layerOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layerOptionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(layerOptionText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(layerBlendOption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(layerOptionText1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(layerOpacySlider, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layerOptionFrameLayout = new javax.swing.GroupLayout(layerOptionFrame.getContentPane());
        layerOptionFrame.getContentPane().setLayout(layerOptionFrameLayout);
        layerOptionFrameLayout.setHorizontalGroup(
            layerOptionFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(layerOptionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layerOptionFrameLayout.setVerticalGroup(
            layerOptionFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(layerOptionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        waveFrame.setMinimumSize(new java.awt.Dimension(194, 260));
        waveFrame.setUndecorated(true);

        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorder11 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorder11.setShowLeftShadow(true);
        dropShadowBorder11.setShowTopShadow(true);
        wavePanel.setBorder(dropShadowBorder11);

        waveOptionPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        waveFreqLabel.setText("Frequency:");

        waveTitle.setFont(new java.awt.Font("DejaVu Sans", 3, 13));
        waveTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        waveTitle.setText("Wave Settings");
        waveTitle.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        waveAmp.setText("Amplitude:");

        freqSlider.setFont(new java.awt.Font("DejaVu Sans", 0, 8));
        freqSlider.setMinimum(1);
        freqSlider.setValue(5);

        amplitudeSlider.setFont(new java.awt.Font("DejaVu Sans", 0, 8));
        amplitudeSlider.setMinimum(1);
        amplitudeSlider.setValue(10);

        javax.swing.GroupLayout waveOptionPanelLayout = new javax.swing.GroupLayout(waveOptionPanel);
        waveOptionPanel.setLayout(waveOptionPanelLayout);
        waveOptionPanelLayout.setHorizontalGroup(
            waveOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(waveOptionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(waveOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(waveFreqLabel)
                    .addComponent(waveAmp)
                    .addGroup(waveOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(freqSlider, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                        .addComponent(amplitudeSlider, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                        .addComponent(waveTitle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)))
                .addContainerGap())
        );
        waveOptionPanelLayout.setVerticalGroup(
            waveOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(waveOptionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(waveTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(waveAmp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(amplitudeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(waveFreqLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(freqSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        waveOkButton.setText("OK");
        waveOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waveOkButtonActionPerformed(evt);
            }
        });

        waveCancelButton.setText("Cancel");
        waveCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waveCancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout wavePanelLayout = new javax.swing.GroupLayout(wavePanel);
        wavePanel.setLayout(wavePanelLayout);
        wavePanelLayout.setHorizontalGroup(
            wavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wavePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(wavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(wavePanelLayout.createSequentialGroup()
                        .addComponent(waveOkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(waveCancelButton))
                    .addComponent(waveOptionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        wavePanelLayout.setVerticalGroup(
            wavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wavePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(waveOptionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(8, 8, 8)
                .addGroup(wavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(waveOkButton)
                    .addComponent(waveCancelButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout waveFrameLayout = new javax.swing.GroupLayout(waveFrame.getContentPane());
        waveFrame.getContentPane().setLayout(waveFrameLayout);
        waveFrameLayout.setHorizontalGroup(
            waveFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(wavePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        waveFrameLayout.setVerticalGroup(
            waveFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(wavePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        imgMosaicFrame.setMinimumSize(new java.awt.Dimension(345, 334));
        imgMosaicFrame.setUndecorated(true);

        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorder12 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorder12.setShowLeftShadow(true);
        dropShadowBorder12.setShowTopShadow(true);
        imgMosaicPanel.setBorder(dropShadowBorder12);

        imgMosaicOptions.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        imgMosaicProcessMosaic.setText("Process Mosaic");
        imgMosaicProcessMosaic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imgMosaicProcessMosaicActionPerformed(evt);
            }
        });

        imgMosaicScaleLabel.setText("% Scale");

        imgMosaicJitterAmount.setFont(new java.awt.Font("DejaVu Sans", 0, 8));

        imgMosaicJitterLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imgMosaicJitterLabel.setText("Jitter");

        imgMosaicBlendCheck.setSelected(true);
        imgMosaicBlendCheck.setText("Blending");
        imgMosaicBlendCheck.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imgMosaicBlendCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imgMosaicBlendCheckActionPerformed(evt);
            }
        });

        imgMosaicBlendAmount.setFont(new java.awt.Font("DejaVu Sans", 0, 8));
        imgMosaicBlendAmount.setValue(33);

        imgMosaicScaleText.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        imgMosaicScaleText.setText("100");

        javax.swing.GroupLayout imgMosaicOptionsLayout = new javax.swing.GroupLayout(imgMosaicOptions);
        imgMosaicOptions.setLayout(imgMosaicOptionsLayout);
        imgMosaicOptionsLayout.setHorizontalGroup(
            imgMosaicOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imgMosaicOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(imgMosaicOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, imgMosaicOptionsLayout.createSequentialGroup()
                        .addComponent(imgMosaicScaleText, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(imgMosaicScaleLabel))
                    .addComponent(imgMosaicJitterAmount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                    .addComponent(imgMosaicJitterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(imgMosaicOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(imgMosaicBlendAmount, 0, 0, Short.MAX_VALUE)
                    .addComponent(imgMosaicBlendCheck, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                    .addComponent(imgMosaicProcessMosaic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        imgMosaicOptionsLayout.setVerticalGroup(
            imgMosaicOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imgMosaicOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(imgMosaicOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imgMosaicJitterLabel)
                    .addComponent(imgMosaicBlendCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(imgMosaicOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(imgMosaicBlendAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(imgMosaicJitterAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(imgMosaicOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imgMosaicProcessMosaic)
                    .addComponent(imgMosaicScaleText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imgMosaicScaleLabel))
                .addContainerGap())
        );

        imgMosaicPreOptions.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        imgMosaicHeight.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        imgMosaicHeight.setText("22");

        imgMosaicWidth.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        imgMosaicWidth.setText("30");

        imgMosaicHeightLabel.setText("Tile Height");

        imgMosaicWidthLabel.setText("Tile Width");

        imgMosaicProcessImg.setText("Pre-process Images");
        imgMosaicProcessImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imgMosaicProcessImgActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout imgMosaicPreOptionsLayout = new javax.swing.GroupLayout(imgMosaicPreOptions);
        imgMosaicPreOptions.setLayout(imgMosaicPreOptionsLayout);
        imgMosaicPreOptionsLayout.setHorizontalGroup(
            imgMosaicPreOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imgMosaicPreOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(imgMosaicPreOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(imgMosaicPreOptionsLayout.createSequentialGroup()
                        .addComponent(imgMosaicWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imgMosaicWidthLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(imgMosaicHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imgMosaicHeightLabel))
                    .addComponent(imgMosaicProcessImg, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE))
                .addContainerGap())
        );
        imgMosaicPreOptionsLayout.setVerticalGroup(
            imgMosaicPreOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imgMosaicPreOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(imgMosaicPreOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imgMosaicWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imgMosaicWidthLabel)
                    .addComponent(imgMosaicHeightLabel)
                    .addComponent(imgMosaicHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imgMosaicProcessImg)
                .addContainerGap())
        );

        imgMosaicFrameTitle.setFont(new java.awt.Font("DejaVu Sans", 3, 13));
        imgMosaicFrameTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imgMosaicFrameTitle.setText("Image Mosaic Settings");
        imgMosaicFrameTitle.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        imgMosaicCancel.setText("Cancel");
        imgMosaicCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imgMosaicCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout imgMosaicPanelLayout = new javax.swing.GroupLayout(imgMosaicPanel);
        imgMosaicPanel.setLayout(imgMosaicPanelLayout);
        imgMosaicPanelLayout.setHorizontalGroup(
            imgMosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, imgMosaicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(imgMosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(imgMosaicFrameTitle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                    .addComponent(imgMosaicPreOptions, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(imgMosaicOptions, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(imgMosaicCancel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE))
                .addContainerGap())
        );
        imgMosaicPanelLayout.setVerticalGroup(
            imgMosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imgMosaicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imgMosaicFrameTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imgMosaicPreOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imgMosaicOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imgMosaicCancel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout imgMosaicFrameLayout = new javax.swing.GroupLayout(imgMosaicFrame.getContentPane());
        imgMosaicFrame.getContentPane().setLayout(imgMosaicFrameLayout);
        imgMosaicFrameLayout.setHorizontalGroup(
            imgMosaicFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imgMosaicPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        imgMosaicFrameLayout.setVerticalGroup(
            imgMosaicFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imgMosaicPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        oilPaintFrame.setAlwaysOnTop(true);
        oilPaintFrame.setMinimumSize(new java.awt.Dimension(234, 261));
        oilPaintFrame.setResizable(false);
        oilPaintFrame.setUndecorated(true);

        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorder13 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorder13.setShowLeftShadow(true);
        dropShadowBorder13.setShowTopShadow(true);
        jPanel1.setBorder(dropShadowBorder13);
        jPanel1.setMinimumSize(new java.awt.Dimension(234, 261));

        oilPaintOkButton.setText("Ok");
        oilPaintOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oilPaintOkButtonActionPerformed(evt);
            }
        });

        oilPaintPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        oiloPaintPaletteLabel.setText("Shades p/Channel");

        oilPaintSizeLabel.setText("Brush Size");

        oilPaintPalette.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        oilPaintPalette.setText("32");

        oilPaintBrushSize.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        oilPaintBrushSize.setText("5");

        jLabel5.setFont(new java.awt.Font("DejaVu Sans", 3, 13));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Oil Paint Effect");
        jLabel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        oilPaintPasses.setFont(new java.awt.Font("DejaVu Sans", 0, 8));
        oilPaintPasses.setMaximum(5);
        oilPaintPasses.setMinimum(1);
        oilPaintPasses.setValue(1);

        oilPaintPassesLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        oilPaintPassesLabel.setText("Number of Passes");

        javax.swing.GroupLayout oilPaintPanelLayout = new javax.swing.GroupLayout(oilPaintPanel);
        oilPaintPanel.setLayout(oilPaintPanelLayout);
        oilPaintPanelLayout.setHorizontalGroup(
            oilPaintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(oilPaintPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(oilPaintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                    .addGroup(oilPaintPanelLayout.createSequentialGroup()
                        .addGroup(oilPaintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(oilPaintBrushSize, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                            .addComponent(oilPaintPalette, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(oilPaintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(oilPaintSizeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(oiloPaintPaletteLabel)))
                    .addComponent(oilPaintPassesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                    .addComponent(oilPaintPasses, 0, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        oilPaintPanelLayout.setVerticalGroup(
            oilPaintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(oilPaintPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(7, 7, 7)
                .addGroup(oilPaintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(oilPaintBrushSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(oilPaintSizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(oilPaintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(oilPaintPalette, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(oiloPaintPaletteLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(oilPaintPassesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(oilPaintPasses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        oilPaintCancelButton.setText("Cancel");
        oilPaintCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oilPaintCancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(oilPaintPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(oilPaintOkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                        .addComponent(oilPaintCancelButton)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(oilPaintPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(oilPaintOkButton)
                    .addComponent(oilPaintCancelButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout oilPaintFrameLayout = new javax.swing.GroupLayout(oilPaintFrame.getContentPane());
        oilPaintFrame.getContentPane().setLayout(oilPaintFrameLayout);
        oilPaintFrameLayout.setHorizontalGroup(
            oilPaintFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        oilPaintFrameLayout.setVerticalGroup(
            oilPaintFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        resizeFrame.setMinimumSize(new java.awt.Dimension(258, 215));
        resizeFrame.setResizable(false);
        resizeFrame.setUndecorated(true);

        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorder14 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorder14.setShowLeftShadow(true);
        dropShadowBorder14.setShowTopShadow(true);
        resizePanel.setBorder(dropShadowBorder14);

        resizeCancelButton.setText("Cancel");
        resizeCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resizeCancelButtonActionPerformed(evt);
            }
        });

        resizeOkButton.setText("Ok");
        resizeOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resizeOkButtonActionPerformed(evt);
            }
        });

        resizeOptionPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        resizeHeightpC.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        resizeHeightpC.setText("100");
        resizeHeightpC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resizeHeightpCActionPerformed(evt);
            }
        });

        resizeAspectCheck.setSelected(true);
        resizeAspectCheck.setText("Lock Aspect Ratio");
        resizeAspectCheck.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        resizeWidthLabel.setText("Width");

        resizeHeightLabel.setText("Height");

        resizeWidthpC.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        resizeWidthpC.setText("100");
        resizeWidthpC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resizeWidthpCActionPerformed(evt);
            }
        });

        resizeWidth.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        resizeWidth.setText("1");
        resizeWidth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resizeWidthActionPerformed(evt);
            }
        });

        resizeWpcLabel.setText("%");

        resizeHpcLabel.setText("%");

        resizeHeight.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        resizeHeight.setText("1");
        resizeHeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resizeHeightActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout resizeOptionPanelLayout = new javax.swing.GroupLayout(resizeOptionPanel);
        resizeOptionPanel.setLayout(resizeOptionPanelLayout);
        resizeOptionPanelLayout.setHorizontalGroup(
            resizeOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resizeOptionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(resizeOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(resizeAspectCheck, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                    .addGroup(resizeOptionPanelLayout.createSequentialGroup()
                        .addGroup(resizeOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(resizeHeight, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(resizeWidth, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(resizeOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(resizeWidthLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(resizeHeightLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(resizeOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(resizeWidthpC, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                            .addComponent(resizeHeightpC, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(resizeOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(resizeHpcLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(resizeWpcLabel, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        resizeOptionPanelLayout.setVerticalGroup(
            resizeOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resizeOptionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(resizeOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resizeWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resizeWidthLabel)
                    .addComponent(resizeWpcLabel)
                    .addComponent(resizeWidthpC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(resizeOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resizeHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resizeHeightLabel)
                    .addComponent(resizeHeightpC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resizeHpcLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resizeAspectCheck)
                .addContainerGap())
        );

        resizeTitle.setFont(new java.awt.Font("DejaVu Sans", 3, 13));
        resizeTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        resizeTitle.setText("Resize Image");
        resizeTitle.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout resizePanelLayout = new javax.swing.GroupLayout(resizePanel);
        resizePanel.setLayout(resizePanelLayout);
        resizePanelLayout.setHorizontalGroup(
            resizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resizePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(resizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(resizeTitle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, resizePanelLayout.createSequentialGroup()
                        .addComponent(resizeOkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(resizeCancelButton))
                    .addComponent(resizeOptionPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        resizePanelLayout.setVerticalGroup(
            resizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resizePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(resizeTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resizeOptionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(3, 3, 3)
                .addGroup(resizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resizeOkButton)
                    .addComponent(resizeCancelButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout resizeFrameLayout = new javax.swing.GroupLayout(resizeFrame.getContentPane());
        resizeFrame.getContentPane().setLayout(resizeFrameLayout);
        resizeFrameLayout.setHorizontalGroup(
            resizeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(resizePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        resizeFrameLayout.setVerticalGroup(
            resizeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(resizePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        posterizeFrame.setMinimumSize(new java.awt.Dimension(313, 277));
        posterizeFrame.setUndecorated(true);

        ditherTonesApplyButton.setText("Apply");
        ditherTonesApplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ditherTonesApplyButtonActionPerformed(evt);
            }
        });

        ditherTonesCancelButton.setText("Cancel");
        ditherTonesCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ditherTonesCancelButtonActionPerformed(evt);
            }
        });

        ditherTonesTitlePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        grayPosterizeTitle.setFont(new java.awt.Font("DejaVu Sans", 3, 13));
        grayPosterizeTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        grayPosterizeTitle.setText("Posterize Options");

        javax.swing.GroupLayout ditherTonesTitlePanelLayout = new javax.swing.GroupLayout(ditherTonesTitlePanel);
        ditherTonesTitlePanel.setLayout(ditherTonesTitlePanelLayout);
        ditherTonesTitlePanelLayout.setHorizontalGroup(
            ditherTonesTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ditherTonesTitlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(grayPosterizeTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                .addContainerGap())
        );
        ditherTonesTitlePanelLayout.setVerticalGroup(
            ditherTonesTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(grayPosterizeTitle)
        );

        ditherTonesOptionBPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        ditherOptionButton.setText("Dithering (Floyd-Steinberg Colors)");
        ditherOptionButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ditherOptionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ditherOptionButtonActionPerformed(evt);
            }
        });

        halfCircleOptionButton.setText("Halftone Circles (Grayscale)");
        halfCircleOptionButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        halfCircleOptionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                halfCircleOptionButtonActionPerformed(evt);
            }
        });

        halfLineOptionButton.setText("Halftone Lines (Grayscale)");
        halfLineOptionButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        halfLineOptionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                halfLineOptionButtonActionPerformed(evt);
            }
        });

        dithergOptionButton.setText("Dithering (Floyd-Steinberg Grayscale)");
        dithergOptionButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        dithergOptionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dithergOptionButtonActionPerformed(evt);
            }
        });

        patternSizeText.setText("8");

        patternSize.setText("Pattern Size / Tone Levels");
        patternSize.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        noDitherOptionButton.setSelected(true);
        noDitherOptionButton.setText("No Dithering");
        noDitherOptionButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        noDitherOptionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noDitherOptionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ditherTonesOptionBPanelLayout = new javax.swing.GroupLayout(ditherTonesOptionBPanel);
        ditherTonesOptionBPanel.setLayout(ditherTonesOptionBPanelLayout);
        ditherTonesOptionBPanelLayout.setHorizontalGroup(
            ditherTonesOptionBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ditherTonesOptionBPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ditherTonesOptionBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ditherTonesOptionBPanelLayout.createSequentialGroup()
                        .addComponent(patternSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(patternSize, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE))
                    .addComponent(noDitherOptionButton, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                    .addComponent(ditherOptionButton, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                    .addComponent(dithergOptionButton, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                    .addComponent(halfCircleOptionButton, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                    .addComponent(halfLineOptionButton, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE))
                .addContainerGap())
        );
        ditherTonesOptionBPanelLayout.setVerticalGroup(
            ditherTonesOptionBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ditherTonesOptionBPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(noDitherOptionButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ditherOptionButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dithergOptionButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(halfCircleOptionButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(halfLineOptionButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ditherTonesOptionBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patternSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patternSize))
                .addContainerGap())
        );

        javax.swing.GroupLayout posterizeFrameLayout = new javax.swing.GroupLayout(posterizeFrame.getContentPane());
        posterizeFrame.getContentPane().setLayout(posterizeFrameLayout);
        posterizeFrameLayout.setHorizontalGroup(
            posterizeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, posterizeFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(posterizeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ditherTonesOptionBPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ditherTonesTitlePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, posterizeFrameLayout.createSequentialGroup()
                        .addComponent(ditherTonesApplyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 179, Short.MAX_VALUE)
                        .addComponent(ditherTonesCancelButton)))
                .addContainerGap())
        );
        posterizeFrameLayout.setVerticalGroup(
            posterizeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, posterizeFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ditherTonesTitlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ditherTonesOptionBPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(posterizeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ditherTonesApplyButton)
                    .addComponent(ditherTonesCancelButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Image Manipulation Program");
        setMinimumSize(new java.awt.Dimension(420, 320));
        setName("ImpWindow"); // NOI18N

        impStatusBar.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        imageFrame.setPreferredSize(new java.awt.Dimension(64, 64));

        imagePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imagePanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout imagePanelLayout = new javax.swing.GroupLayout(imagePanel);
        imagePanel.setLayout(imagePanelLayout);
        imagePanelLayout.setHorizontalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 294, Short.MAX_VALUE)
        );
        imagePanelLayout.setVerticalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 112, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout imageFrameLayout = new javax.swing.GroupLayout(imageFrame);
        imageFrame.setLayout(imageFrameLayout);
        imageFrameLayout.setHorizontalGroup(
            imageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        imageFrameLayout.setVerticalGroup(
            imageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        scrollPanel.setViewportView(imageFrame);

        ImpMenuBar.setFont(new java.awt.Font("DejaVu Sans", 0, 10));

        fileMenuItem.setText("File");
        fileMenuItem.setFont(fileMenuItem.getFont());

        openItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openItem.setText("Open File...");
        openItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openItemActionPerformed(evt);
            }
        });
        fileMenuItem.add(openItem);

        saveItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveItem.setText("Save");
        saveItem.setEnabled(false);
        saveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveItemActionPerformed(evt);
            }
        });
        fileMenuItem.add(saveItem);

        saveAsItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveAsItem.setText("Save As...");
        saveAsItem.setEnabled(false);
        saveAsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsItemActionPerformed(evt);
            }
        });
        fileMenuItem.add(saveAsItem);

        exportMenuItem.setText("Export");
        exportMenuItem.setEnabled(false);

        exportAsciiItem.setText("Ascii Image");
        exportAsciiItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportAsciiItemActionPerformed(evt);
            }
        });
        exportMenuItem.add(exportAsciiItem);

        asciiStereogramItem.setText("Ascii Stereogram");
        asciiStereogramItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                asciiStereogramItemActionPerformed(evt);
            }
        });
        exportMenuItem.add(asciiStereogramItem);

        stereogramItem.setText("Stereogram");
        stereogramItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stereogramItemActionPerformed(evt);
            }
        });
        exportMenuItem.add(stereogramItem);

        imageMosaicItem.setText("Image Mosaic");
        imageMosaicItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageMosaicItemActionPerformed(evt);
            }
        });
        exportMenuItem.add(imageMosaicItem);

        fileMenuItem.add(exportMenuItem);

        exitItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        exitItem.setText("Exit");
        exitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitItemActionPerformed(evt);
            }
        });
        fileMenuItem.add(exitItem);

        ImpMenuBar.add(fileMenuItem);

        editMenuItem.setText("Edit");
        editMenuItem.setEnabled(false);
        editMenuItem.setFont(editMenuItem.getFont());

        undoItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undoItem.setText("Undo");
        undoItem.setEnabled(false);
        undoItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoItemActionPerformed(evt);
            }
        });
        editMenuItem.add(undoItem);

        redoItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        redoItem.setText("Redo");
        redoItem.setEnabled(false);
        redoItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoItemActionPerformed(evt);
            }
        });
        editMenuItem.add(redoItem);

        transMenuItem.setText("Transform");
        transMenuItem.setEnabled(false);

        rotateCWItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        rotateCWItem.setText("Rotate Canvas CW");
        rotateCWItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateCWItemActionPerformed(evt);
            }
        });
        transMenuItem.add(rotateCWItem);

        rotateCCWItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        rotateCCWItem.setText("Rotate Canvas CCW");
        rotateCCWItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateCCWItemActionPerformed(evt);
            }
        });
        transMenuItem.add(rotateCCWItem);

        rotate180Item.setText("Rotate Canvas 180¬∞");
        rotate180Item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotate180ItemActionPerformed(evt);
            }
        });
        transMenuItem.add(rotate180Item);

        flipHItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        flipHItem.setText("Flip Canvas Horizontally");
        flipHItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flipHItemActionPerformed(evt);
            }
        });
        transMenuItem.add(flipHItem);

        flipVItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        flipVItem.setText("Flip Canvas Vertically");
        flipVItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flipVItemActionPerformed(evt);
            }
        });
        transMenuItem.add(flipVItem);

        resizeLayerItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        resizeLayerItem.setText("Scale Canvas");
        resizeLayerItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resizeLayerItemActionPerformed(evt);
            }
        });
        transMenuItem.add(resizeLayerItem);

        editMenuItem.add(transMenuItem);

        ImpMenuBar.add(editMenuItem);

        filtersMenuItem.setText("Filters");
        filtersMenuItem.setEnabled(false);

        brightNContrastItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        brightNContrastItem.setText("Brightness-Contrast");
        brightNContrastItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brightNContrastItemActionPerformed(evt);
            }
        });
        filtersMenuItem.add(brightNContrastItem);

        colorBalanceItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        colorBalanceItem.setText("Color Balance");
        colorBalanceItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorBalanceItemActionPerformed(evt);
            }
        });
        filtersMenuItem.add(colorBalanceItem);

        colorizeItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        colorizeItem.setText("Colorize");
        colorizeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorizeItemActionPerformed(evt);
            }
        });
        filtersMenuItem.add(colorizeItem);

        invertItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        invertItem.setText("Invert");
        invertItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invertItemActionPerformed(evt);
            }
        });
        filtersMenuItem.add(invertItem);

        desaturateItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        desaturateItem.setText("Desaturate");
        desaturateItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desaturateItemActionPerformed(evt);
            }
        });
        filtersMenuItem.add(desaturateItem);

        bwItem.setText("Black & White");
        bwItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bwItemActionPerformed(evt);
            }
        });
        filtersMenuItem.add(bwItem);

        ditherTonesItem.setText("Dither / Halftones");
        ditherTonesItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ditherTonesItemActionPerformed(evt);
            }
        });
        filtersMenuItem.add(ditherTonesItem);

        blurMenuItem.setText("Blur");

        blurItem.setText("Blur");
        blurItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blurItemActionPerformed(evt);
            }
        });
        blurMenuItem.add(blurItem);

        moreBlurItem.setText("More Blur");
        moreBlurItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moreBlurItemActionPerformed(evt);
            }
        });
        blurMenuItem.add(moreBlurItem);

        filtersMenuItem.add(blurMenuItem);

        sharpenMenuItem.setText("Sharpen");

        sharpenItem.setText("Sharpen");
        sharpenItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sharpenItemActionPerformed(evt);
            }
        });
        sharpenMenuItem.add(sharpenItem);

        moreSharpenItem.setText("Thick Sharpen");
        moreSharpenItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moreSharpenItemActionPerformed(evt);
            }
        });
        sharpenMenuItem.add(moreSharpenItem);

        unSharpMask.setText("Unsharp Mask");
        unSharpMask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unSharpMaskActionPerformed(evt);
            }
        });
        sharpenMenuItem.add(unSharpMask);

        filtersMenuItem.add(sharpenMenuItem);

        effectMenuItem.setText("Effects");

        mosaicItem.setText("Mosaic");
        mosaicItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mosaicItemActionPerformed(evt);
            }
        });
        effectMenuItem.add(mosaicItem);

        recMosaicItem.setText("Recursive Mosaic");
        recMosaicItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recMosaicItemActionPerformed(evt);
            }
        });
        effectMenuItem.add(recMosaicItem);

        waterEffectItem.setText("Wave Effect");
        waterEffectItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waterEffectItemActionPerformed(evt);
            }
        });
        effectMenuItem.add(waterEffectItem);

        oilEffectItem.setText("Oil Paint Effect");
        oilEffectItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oilEffectItemActionPerformed(evt);
            }
        });
        effectMenuItem.add(oilEffectItem);

        edgeDetectItem.setText("Edge Detect");
        edgeDetectItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgeDetectItemActionPerformed(evt);
            }
        });
        effectMenuItem.add(edgeDetectItem);

        motionBlurItem.setText("Motion Blur");
        motionBlurItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motionBlurItemActionPerformed(evt);
            }
        });
        effectMenuItem.add(motionBlurItem);

        embossItem.setText("Emboss");
        embossItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                embossItemActionPerformed(evt);
            }
        });
        effectMenuItem.add(embossItem);

        filtersMenuItem.add(effectMenuItem);

        ImpMenuBar.add(filtersMenuItem);

        viewMenuItem.setText("View");
        viewMenuItem.setEnabled(false);

        zoomInItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_EQUALS, 0));
        zoomInItem.setText("Zoom In");
        zoomInItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomInItemActionPerformed(evt);
            }
        });
        viewMenuItem.add(zoomInItem);

        zoomOutItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_MINUS, 0));
        zoomOutItem.setText("Zoom Out");
        zoomOutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutItemActionPerformed(evt);
            }
        });
        viewMenuItem.add(zoomOutItem);

        zoomFitItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_MULTIPLY, 0));
        zoomFitItem.setText("Fit Image");
        zoomFitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomFitItemActionPerformed(evt);
            }
        });
        viewMenuItem.add(zoomFitItem);

        zoom11Item.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DIVIDE, 0));
        zoom11Item.setText("Zoom 1:1");
        zoom11Item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoom11ItemActionPerformed(evt);
            }
        });
        viewMenuItem.add(zoom11Item);

        ImpMenuBar.add(viewMenuItem);

        layerMenuItem.setText("Layers");
        layerMenuItem.setEnabled(false);

        dupLayerItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_INSERT, 0));
        dupLayerItem.setText("Duplicate Layer");
        dupLayerItem.setEnabled(false);
        dupLayerItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dupLayerItemActionPerformed(evt);
            }
        });
        layerMenuItem.add(dupLayerItem);

        delLayerItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.CTRL_MASK));
        delLayerItem.setText("Delete Layer");
        delLayerItem.setEnabled(false);
        delLayerItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delLayerItemActionPerformed(evt);
            }
        });
        layerMenuItem.add(delLayerItem);

        toggleVisLayerItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.SHIFT_MASK));
        toggleVisLayerItem.setText("Toggle Visible");
        toggleVisLayerItem.setEnabled(false);
        toggleVisLayerItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleVisLayerItemActionPerformed(evt);
            }
        });
        layerMenuItem.add(toggleVisLayerItem);

        nLayerItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PAGE_UP, 0));
        nLayerItem.setText("Next Layer");
        nLayerItem.setEnabled(false);
        nLayerItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nLayerItemActionPerformed(evt);
            }
        });
        layerMenuItem.add(nLayerItem);

        pLayerItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PAGE_DOWN, 0));
        pLayerItem.setText("Previous Layer");
        pLayerItem.setEnabled(false);
        pLayerItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pLayerItemActionPerformed(evt);
            }
        });
        layerMenuItem.add(pLayerItem);

        upLayerItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PAGE_UP, java.awt.event.InputEvent.CTRL_MASK));
        upLayerItem.setText("Move Up");
        upLayerItem.setEnabled(false);
        upLayerItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upLayerItemActionPerformed(evt);
            }
        });
        layerMenuItem.add(upLayerItem);

        downLayerItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PAGE_DOWN, java.awt.event.InputEvent.CTRL_MASK));
        downLayerItem.setText("Move Down");
        downLayerItem.setEnabled(false);
        downLayerItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downLayerItemActionPerformed(evt);
            }
        });
        layerMenuItem.add(downLayerItem);

        mergeDownItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_END, java.awt.event.InputEvent.CTRL_MASK));
        mergeDownItem.setText("Merge Down");
        mergeDownItem.setEnabled(false);
        mergeDownItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mergeDownItemActionPerformed(evt);
            }
        });
        layerMenuItem.add(mergeDownItem);

        flatten2LayerItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_HOME, java.awt.event.InputEvent.CTRL_MASK));
        flatten2LayerItem.setText("Flatten Into Layer");
        flatten2LayerItem.setEnabled(false);
        flatten2LayerItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flatten2LayerItemActionPerformed(evt);
            }
        });
        layerMenuItem.add(flatten2LayerItem);

        flattenMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_HOME, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        flattenMenuItem.setText("Flatten Image");
        flattenMenuItem.setEnabled(false);
        flattenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flattenMenuItemActionPerformed(evt);
            }
        });
        layerMenuItem.add(flattenMenuItem);

        ImpMenuBar.add(layerMenuItem);

        aboutMenuItem.setText("?");

        aboutItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        aboutItem.setText("About");
        aboutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutItemActionPerformed(evt);
            }
        });
        aboutMenuItem.add(aboutItem);

        funcTestItem.setText("Test Func");
        funcTestItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                funcTestItemActionPerformed(evt);
            }
        });
        aboutMenuItem.add(funcTestItem);

        ImpMenuBar.add(aboutMenuItem);

        setJMenuBar(ImpMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
            .addComponent(impStatusBar, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(scrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(impStatusBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    final IIOReadProgressListener progressListener = new IIOReadProgressListener() {

        public void sequenceStarted(ImageReader source, int minIndex) {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        public void sequenceComplete(ImageReader source) {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        public void imageStarted(ImageReader source, int imageIndex) {
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    pbar.setVisible(true);
                    pbar.setValue(0);
                    invalidate();
                }
            });
        }

        public void imageProgress(ImageReader source, final float percentageDone) {
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    statusLabel.setText(" Loading image... " + (int)percentageDone + "%");
                    pbar.setValue((int)percentageDone);
                }
            });
        }

        public void imageComplete(ImageReader source) {
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    pbar.setValue(0);
                    imagePanel.revalidate();
                    statusLabel.setText(" Ready.");
                }
            });
        }

        public void thumbnailStarted(ImageReader source, int imageIndex, int thumbnailIndex) {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        public void thumbnailProgress(ImageReader source, float percentageDone) {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        public void thumbnailComplete(ImageReader source) {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        public void readAborted(ImageReader source) {
            throw new UnsupportedOperationException("Not supported yet.");
        }
    };

    /**
     * This method recieves a Jframe and it centers it on the current screen.
     * @param frame The Jframe to be centered
     */
    public void centerFrame(JFrame frame) {
        Point center =
                java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().
                getCenterPoint();
        frame.setLocation(
                center.x - (frame.getWidth())/2,
                center.y - (frame.getHeight())/2);
    }

    /**
     * This method is used to lock the menu's each time an IMP function is
     * called. It toggles menu's accordingly to IMP's state.
     *
     * @param work If #true, this flag indicates IMP is busy and all interface
     * menus should be locked. If #false, it unlocks the function menus and
     * checks the current layer's state in order to enable the undo/redo
     * options.
     */
    public void toggleMenus(boolean work) {
        core.selectedLayer = selectedLayer;

        int nLayers = core.getNumberofLayers();
        if (work) {
            statusLabel.setText(" Processing...");
            imagePanel.setAlpha(0.5f);
            fileMenuItem.setEnabled(false);
            editMenuItem.setEnabled(false);
            filtersMenuItem.setEnabled(false);
            viewMenuItem.setEnabled(false);
            layerMenuItem.setEnabled(false);
        }
        else {
            if(!error) {
                statusLabel.setText(
                    "Ready: Layer " +
                    (selectedLayer + 1) + '/' + core.getNumberofLayers());
                if(!core.isVisible())
                    statusLabel.setText(statusLabel.getText() + " (Hidden)");

                imagePanel.setAlpha(1.0f);
                fileMenuItem.setEnabled(true);
                editMenuItem.setEnabled(true);
                filtersMenuItem.setEnabled(true);
                viewMenuItem.setEnabled(true);
                layerMenuItem.setEnabled(true);

                if(selectedLayer == 0) {
                    pLayerItem.setEnabled(false);
                    downLayerItem.setEnabled(false);
                }
                else {
                    pLayerItem.setEnabled(true);
                    downLayerItem.setEnabled(true);
                }
                if(selectedLayer == nLayers - 1) {
                    nLayerItem.setEnabled(false);
                    upLayerItem.setEnabled(false);
                    mergeDownItem.setEnabled(false);
                }
                else {
                    nLayerItem.setEnabled(true);
                    upLayerItem.setEnabled(true);
                    mergeDownItem.setEnabled(true);
                }
                if(nLayers > 1) {
                    delLayerItem.setEnabled(true);
                    flattenMenuItem.setEnabled(true);
                    flatten2LayerItem.setEnabled(true);
                }
                else {
                    delLayerItem.setEnabled(false);
                    flattenMenuItem.setEnabled(false);
                    flatten2LayerItem.setEnabled(false);
                }

                if(core.getLayerUndoLevels() > 0)
                    undoItem.setEnabled(true);
                else
                    undoItem.setEnabled(false);

                if(core.getLayerRedoLevels() >= 0)
                    redoItem.setEnabled(true);
                else
                    redoItem.setEnabled(false);
            }
            else {
                toggleMenus(true);
                statusLabel.setForeground(Color.RED);
                statusLabel.setText(" Error: OUT OF MEMORY!");
                fileMenuItem.setEnabled(true);
                saveItem.setEnabled(false);
                saveAsItem.setEnabled(false);
                exportMenuItem.setEnabled(false);
                imageMosaicItem.setEnabled(false);
            }
        }
    }

    public void showImage() {
        try {
            image = core.updateCanvas();
            imagePanel.setImage(scaleImage(scale));
            imagePanel.paint(imagePanel.getGraphics());
        }
        catch (OutOfMemoryError oom) {
            
            error = true;
        }
    }

    /**
     * This method is used to scale the resulting image into the desired
     * interface scale factor
     * .
     * @param scale Scale factor.
     * @return BufferedImage with the scaled instance of IMP's result.
     */
    public BufferedImage scaleImage(float scale) {

        int nw = (int)(image.getWidth() * scale);
        int nh = (int)(image.getHeight() * scale);

        changeSize(nw, nh);

        if(scale != 1.0) {

        BufferedImageOp rescale = new AffineTransformOp(
                AffineTransform.getScaleInstance(scale, scale),
                new RenderingHints(
                RenderingHints.KEY_INTERPOLATION,
                RenderingHints.VALUE_INTERPOLATION_BILINEAR));

        BufferedImage rescaledImage =
                new BufferedImage(nw, nh, BufferedImage.TYPE_INT_ARGB);
        rescale.filter(image, rescaledImage);
        return rescaledImage;
        }
        else {
            return image;
        }
    }

    /**
     * This method is used to scale the image frame to the desired dimensions.
     * @param newWidth The new width of the image frame.
     * @param newHeight The new height of the image frame.
     */
    private void changeSize(int newWidth, int newHeight) {

        Dimension imageSize = new Dimension(newWidth, newHeight);
        imageFrame.setSize(imageSize);
        imageFrame.setPreferredSize(imageSize);
    }

    /**
     * This method is used to scale the main frame to the desired dimensions.
     * @param newWidth The new width of the main frame.
     * @param newHeight The new height of the main frame.
     */
    private void changeWindowSize(int newWidth, int newHeight) {

        changeSize(newWidth, newHeight);

        Dimension frameSize;
        if (newWidth < screen_w && newHeight < screen_h) {
            frameSize = new Dimension(newWidth+24, newHeight+112);
            this.setSize(frameSize);
            this.setLocation(
                    (screen_w - this.getWidth())/2, (screen_h - this.getHeight())/2);
        }
        else {
            frameSize = new Dimension(screen_w-50, screen_h-50);
            this.setSize(frameSize);
            this.setLocation(0, 0);
        }
        this.setPreferredSize(frameSize);
    }

    /**
     * This method returns the current image file extension.
     * This method is used to detect the image desired image format when saving
     * an image into a file. The known extensions to IMP are: bmp, png, jpg
     * and gif. If the given extension is unknown, IMP imposes the bmp
     * extension.
     * @return The extension of the current image file.
     */
    private String getFileExtension() {
        String ext = imageFile.getPath();
        int i = 0;
        i = (ext.lastIndexOf('.'));
        if(i != -1) ext = ext.substring(i+1).toLowerCase();
        else ext = "bmp";
        if(ext.equals("bmp") ||
                ext.equals("png") ||
                ext.equals("jpg") ||
                ext.equals("gif")) return ext;
        else return "bmp";
    }

    /* GUI's events and IMP's function calls */

    private void openItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openItemActionPerformed
        statusLabel.setForeground(new Color(16,16,16));
        fileChooser.setDialogTitle("Select Image File");
        fileChooser.setFileSelectionMode(fileChooser.FILES_ONLY);
        if(imageFile != null)
            fileChooser.setSelectedFile(imageFile);
        int returnStatus = fileChooser.showOpenDialog(this);
        if(returnStatus == JFileChooser.APPROVE_OPTION) {
            new Thread() {
                @Override
                public void run() {
                    try {
                        ImageInputStream iis = ImageIO.createImageInputStream(
                                fileChooser.getSelectedFile());
                        Iterator it = ImageIO.getImageReaders(iis);
                        if(it.hasNext()) {
                            ImageReader reader = (ImageReader) it.next();
                            reader.setInput(iis);
                            reader.addIIOReadProgressListener(progressListener);
                            final BufferedImage loadingImage = reader.read(
                                    reader.getMinIndex());

                            SwingUtilities.invokeLater(new Runnable() {
                                public void run() {
                                    selectedLayer = 0;
                                    core = null;
                                    core = new ImpCore();
                                    core.initialize(
                                            loadingImage.getWidth(),
                                            loadingImage.getHeight());
                                    core.importImage2Layer(0, loadingImage);
                                    saveItem.setEnabled(true);
                                    saveAsItem.setEnabled(true);
                                    exportMenuItem.setEnabled(true);
                                    imageMosaicItem.setEnabled(true);
                                    editMenuItem.setEnabled(true);
                                    filtersMenuItem.setEnabled(true);
                                    viewMenuItem.setEnabled(true);
                                    layerMenuItem.setEnabled(true);
                                    transMenuItem.setEnabled(true);
                                    dupLayerItem.setEnabled(true);
                                    toggleVisLayerItem.setEnabled(true);

                                    error = false;
                                    toggleMenus(false);

                                    image = core.updateCanvas();

                                    float hscale, vscale;
                                    hscale = vscale = 1.0f;
                                    if(core.canvasWidth >
                                            scrollPanel.getWidth()) {
                                        vscale = (scrollPanel.getWidth()
                                                * 1.0f/core.canvasWidth);
                                    }
                                    if(core.canvasHeight >
                                            scrollPanel.getHeight()) {
                                        hscale = (scrollPanel.getHeight() *
                                                1.0f/core.canvasHeight);
                                    }
                                    if(vscale < hscale) scale = vscale;
                                    else scale = hscale;

                                    imagePanel.setImage(scaleImage(scale));

                                }
                            });
                        }
                        statusLabel.setText(" Initializing...");
                    } catch (IOException e) {e.printStackTrace();}
                }
            }.start();
            imageFile = fileChooser.getSelectedFile();
        }
    }//GEN-LAST:event_openItemActionPerformed

    private void saveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveItemActionPerformed
        try {
            String ext = getFileExtension();
            statusLabel.setText(" Saving...");
            if(ext.equals("jpg") || ext.equals("bmp"))
                ImageIO.write(core.getCanvasNoAlpha(), ext, imageFile);
            else
                ImageIO.write(image, ext, imageFile);
            statusLabel.setText(" Saved!");
        }
        catch (IOException e) {
            e.printStackTrace();
            statusLabel.setText(" Error Saving!");
        }
    }//GEN-LAST:event_saveItemActionPerformed

    private void saveAsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsItemActionPerformed
        fileChooser.setDialogTitle("Select Image File Destination");
        fileChooser.setFileSelectionMode(fileChooser.FILES_ONLY);
        fileChooser.setSelectedFile(imageFile);
        int returnStatus = fileChooser.showSaveDialog(this);
        if(returnStatus == JFileChooser.APPROVE_OPTION) {
            try {
                imageFile = fileChooser.getSelectedFile();
                if(imageFile.exists()) {
                    returnStatus = JOptionPane.showConfirmDialog (null,
                       "Overwrite existing file?","Confirm Overwrite",
                        JOptionPane.OK_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE);
                    if(returnStatus == JOptionPane.CANCEL_OPTION) return;
                }
                String ext = getFileExtension();
                statusLabel.setText(" Saving...");
                if(ext.equals("jpg") || ext.equals("bmp"))
                    ImageIO.write(core.getCanvasNoAlpha(), ext, imageFile);
                else
                    ImageIO.write(image, ext, imageFile);
                statusLabel.setText(" Saved!");
            }
            catch (IOException e) {
                e.printStackTrace();
                statusLabel.setText(" Error Saving!");
            }
        }
    }//GEN-LAST:event_saveAsItemActionPerformed

    private void exportAsciiItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportAsciiItemActionPerformed
        centerFrame(exportAsciiImgFrame);
        exportAsciiImgFrame.setVisible(true);
}//GEN-LAST:event_exportAsciiItemActionPerformed

    private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitItemActionPerformed

    private void zoomInItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInItemActionPerformed
        if(scale < 8)
            scale *= 2;
        imagePanel.setImage(scaleImage(scale));
    }//GEN-LAST:event_zoomInItemActionPerformed

    private void zoomOutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutItemActionPerformed
        if(scale > 1.0/16)
            scale /= 2;
        imagePanel.setImage(scaleImage(scale));
    }//GEN-LAST:event_zoomOutItemActionPerformed

    private void zoomFitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomFitItemActionPerformed

        float hscale, vscale;
        hscale = vscale = 1.0f;
        if(core.canvasWidth > scrollPanel.getWidth()) {
            vscale = (scrollPanel.getWidth() * 1.0f/core.canvasWidth);
        }
        if(core.canvasHeight > scrollPanel.getHeight()) {
            hscale = (scrollPanel.getHeight() *1.0f/core.canvasHeight);
        }
        if(vscale < hscale) scale = vscale;
        else scale = hscale;
        
        imagePanel.setImage(scaleImage(scale));
    }//GEN-LAST:event_zoomFitItemActionPerformed

    private void zoom11ItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoom11ItemActionPerformed
        scale = 1;
        imagePanel.setImage(scaleImage(scale));
        changeSize(core.canvasWidth, core.canvasHeight);
    }//GEN-LAST:event_zoom11ItemActionPerformed

    private void aboutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutItemActionPerformed
        centerFrame(aboutFrame);
        aboutFrame.setVisible(true);
    }//GEN-LAST:event_aboutItemActionPerformed

    private void aboutCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutCloseActionPerformed
        aboutFrame.setVisible(false);
    }//GEN-LAST:event_aboutCloseActionPerformed

    private void undoItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoItemActionPerformed
        core.selectedLayer = selectedLayer;
        toggleMenus(true);
        Thread undo = new Thread () {
            @Override
            public void run() {
                try {
                    if(core.undo() == 0)
                        undoItem.setEnabled(false);
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                        redoItem.setEnabled(true);
                    }
                });
            }
        };
        undo.start();
    }//GEN-LAST:event_undoItemActionPerformed

    private void redoItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoItemActionPerformed
        core.selectedLayer = selectedLayer;
        toggleMenus(true);
        Thread redo = new Thread () {
            @Override
            public void run() {
                try {
                    if(core.redo() == 0)
                        redoItem.setEnabled(false);
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        redo.start();
    }//GEN-LAST:event_redoItemActionPerformed

    private void brightNContrastItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brightNContrastItemActionPerformed
        bbncText.setText("0%");
        cbncText.setText("0%");
        bbncSlider.setValue(0);
        cbncSlider.setValue(0);
        centerFrame(bncFrame);
        bncFrame.setVisible(true);
    }//GEN-LAST:event_brightNContrastItemActionPerformed

    private void bncApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bncApplyButtonActionPerformed
        bncFrame.setVisible(false);
        core.selectedLayer = selectedLayer;
        toggleMenus(true);
        Thread bnc = new Thread () {
            @Override
            public void run() {
                try {
                    core.bnc(bbncSlider.getValue()*1.0f/100,
                            cbncSlider.getValue()*1.0f/100);
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        bnc.start();
}//GEN-LAST:event_bncApplyButtonActionPerformed

    private void bncCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bncCancelButtonActionPerformed
        bncFrame.setVisible(false);
}//GEN-LAST:event_bncCancelButtonActionPerformed

    private void bbncSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_bbncSliderStateChanged
        bbncText.setText("" + bbncSlider.getValue() + "%");
}//GEN-LAST:event_bbncSliderStateChanged

    private void bbncTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bbncTextActionPerformed
        String tmp = bbncText.getText();
        int end = tmp.indexOf('%');
        if(end != -1) bbncSlider.setValue(Integer.parseInt(tmp.substring(0, end)));
        else bbncSlider.setValue(Integer.parseInt(tmp));
    }//GEN-LAST:event_bbncTextActionPerformed

    private void cbncSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cbncSliderStateChanged
        cbncText.setText("" + cbncSlider.getValue() + "%");
    }//GEN-LAST:event_cbncSliderStateChanged

    private void cbncTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbncTextActionPerformed
        String tmp = cbncText.getText();
        int end = tmp.indexOf('%');
        if(end != -1) cbncSlider.setValue(Integer.parseInt(tmp.substring(0, end)));
        else cbncSlider.setValue(Integer.parseInt(tmp));
    }//GEN-LAST:event_cbncTextActionPerformed

    private void redTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redTextActionPerformed
        String tmp = redText.getText();
        int end = tmp.indexOf('%');
        if(end != -1) redSlider.setValue(Integer.parseInt(tmp.substring(0, end)));
        else redSlider.setValue(Integer.parseInt(tmp));
}//GEN-LAST:event_redTextActionPerformed

    private void redSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_redSliderStateChanged
        redText.setText("" + redSlider.getValue() + "%");
}//GEN-LAST:event_redSliderStateChanged

    private void colorApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorApplyButtonActionPerformed
        colorFrame.setVisible(false);
        core.selectedLayer = selectedLayer;
        toggleMenus(true);
        Thread color = new Thread () {
            @Override
            public void run() {
                try {
                    core.colorBalance(
                        redSlider.getValue()*2.55f,
                        greenSlider.getValue()*2.55f,
                        blueSlider.getValue()*2.55f);
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        color.start();
}//GEN-LAST:event_colorApplyButtonActionPerformed

    private void colorCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorCancelButtonActionPerformed
        colorFrame.setVisible(false);
}//GEN-LAST:event_colorCancelButtonActionPerformed

    private void greenTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greenTextActionPerformed
        String tmp = greenText.getText();
        int end = tmp.indexOf('%');
        if(end != -1) greenSlider.setValue(Integer.parseInt(tmp.substring(0, end)));
        else greenSlider.setValue(Integer.parseInt(tmp));
}//GEN-LAST:event_greenTextActionPerformed

    private void greenSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_greenSliderStateChanged
        greenText.setText("" + greenSlider.getValue() + "%");
}//GEN-LAST:event_greenSliderStateChanged

    private void blueTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blueTextActionPerformed
        String tmp = blueText.getText();
        int end = tmp.indexOf('%');
        if(end != -1) blueSlider.setValue(Integer.parseInt(tmp.substring(0, end)));
        else blueSlider.setValue(Integer.parseInt(tmp));
}//GEN-LAST:event_blueTextActionPerformed

    private void blueSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_blueSliderStateChanged
        blueText.setText("" + blueSlider.getValue() + "%");
}//GEN-LAST:event_blueSliderStateChanged

    private void colorBalanceItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorBalanceItemActionPerformed
        redText.setText("0%");
        greenText.setText("0%");
        blueText.setText("0%");
        redSlider.setValue(0);
        greenSlider.setValue(0);
        blueSlider.setValue(0);
        centerFrame(colorFrame);
        colorFrame.setVisible(true);
    }//GEN-LAST:event_colorBalanceItemActionPerformed

    private void colorizeItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorizeItemActionPerformed
        
        final Color color = colorChooser.showDialog(
                this, "Color Chooser", Color.BLACK);

        if(color != null) {
            core.selectedLayer = selectedLayer;
            toggleMenus(true);
            Thread colorize = new Thread () {
                @Override
                public void run() {
                    try {
                        core.colorize(color.getRed(),
                                color.getGreen(),
                                color.getBlue());
                    }
                    catch (OutOfMemoryError oom) {
                        
                        error = true;
                    }
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            showImage();
                            toggleMenus(false);
                        }
                    });
                }
            };
            colorize.start();
        }
    }//GEN-LAST:event_colorizeItemActionPerformed

    private void desaturateItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desaturateItemActionPerformed
        core.selectedLayer = selectedLayer;
        toggleMenus(true);
        Thread desaturate = new Thread () {
            @Override
            public void run() {
                try {
                    core.desaturate(1, 1, 1);
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        desaturate.start();
        
    }//GEN-LAST:event_desaturateItemActionPerformed

    private void mosaicItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mosaicItemActionPerformed
        centerFrame(mosaicFrame);
        mosaicFrame.setVisible(true);
    }//GEN-LAST:event_mosaicItemActionPerformed

    private void recMosaicItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recMosaicItemActionPerformed
        centerFrame(recurMosaicFrame);
        recurMosaicFrame.setVisible(true);
    }//GEN-LAST:event_recMosaicItemActionPerformed

    private void mosaicApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mosaicApplyButtonActionPerformed
        
        mosaicFrame.setVisible(false);
        core.selectedLayer = selectedLayer;

        int m = Integer.parseInt(hSizeMosaicText.getText());
        int n = Integer.parseInt(vSizeMosaicText.getText());
        m = m <= core.canvasWidth/2 ? m : core.canvasWidth/2;
        n = n <= core.canvasHeight/2 ? n : core.canvasHeight/2;
        final int m2 = m;
        final int n2 = n;

        toggleMenus(true);
        Thread mosaic = new Thread () {
            @Override
            public void run() {
                try {
                    core.mosaic(m2, n2);
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        mosaic.start();
}//GEN-LAST:event_mosaicApplyButtonActionPerformed

    private void mosaicCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mosaicCancelButtonActionPerformed
        mosaicFrame.setVisible(false);
}//GEN-LAST:event_mosaicCancelButtonActionPerformed

    private void recurMosaicApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recurMosaicApplyButtonActionPerformed
        
        recurMosaicFrame.setVisible(false);
        toggleMenus(true);
        core.selectedLayer = 0;
        core.flattenLayers();
        float imageScale = Float.parseFloat(recurMosaicIScaleText.getText());
        float mosaicScale = Float.parseFloat(recurMosaicMScaleText.getText());
        imageScale = imageScale > 100.0f ? imageScale : 100.0f;
        imageScale = imageScale < 0.0f ? 1.0f : imageScale;

        mosaicScale = mosaicScale > 0.0f ? mosaicScale : 1.0f;
        mosaicScale = mosaicScale > 100.0f ? 100.0f : mosaicScale;

        final float is = imageScale/100.0f;
        final float ms = mosaicScale/100.0f;

        Thread recurMosaic = new Thread () {
            @Override
            public void run() {
                try {
                    core.recurMosaic(is, ms);
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {

                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        recurMosaic.start();
}//GEN-LAST:event_recurMosaicApplyButtonActionPerformed

    private void recurMosaicCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recurMosaicCancelButtonActionPerformed
        recurMosaicFrame.setVisible(false);
}//GEN-LAST:event_recurMosaicCancelButtonActionPerformed

    private void blurItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blurItemActionPerformed
        core.selectedLayer = selectedLayer;
        toggleMenus(true);
        Thread blur = new Thread () {
            @Override
            public void run() {
                try {
                    core.blur();
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        blur.start();
        
    }//GEN-LAST:event_blurItemActionPerformed

    private void moreBlurItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moreBlurItemActionPerformed
        core.selectedLayer = selectedLayer;
        toggleMenus(true);
        Thread moreBlur = new Thread () {
            @Override
            public void run() {
                try {
                    core.moreBlur();
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        moreBlur.start();
    }//GEN-LAST:event_moreBlurItemActionPerformed

    private void sharpenItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sharpenItemActionPerformed
        core.selectedLayer = selectedLayer;
        toggleMenus(true);
        Thread sharpen = new Thread () {
            @Override
            public void run() {
                try {
                    core.sharpen();
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        sharpen.start();
    }//GEN-LAST:event_sharpenItemActionPerformed

    private void moreSharpenItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moreSharpenItemActionPerformed
        core.selectedLayer = selectedLayer;
        toggleMenus(true);
        Thread moreSharpen = new Thread () {
            @Override
            public void run() {
                try {
                    core.moreSharpen();
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        moreSharpen.start();
    }//GEN-LAST:event_moreSharpenItemActionPerformed

    private void exportOkAsciiButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportOkAsciiButtonActionPerformed
        exportAsciiImgFrame.setVisible(false);
        core.selectedLayer = selectedLayer;
        fileChooser.setSelectedFile(new File (imageFile.getPath() + ".html"));
        int returnStatus = fileChooser.showSaveDialog(this);
        if(returnStatus == JFileChooser.APPROVE_OPTION) {
            final File file = fileChooser.getSelectedFile();
            if(file.exists()) {
                returnStatus = JOptionPane.showConfirmDialog (null,
                   "Overwrite existing file?","Confirm Overwrite",
                    JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE);
                if(returnStatus == JOptionPane.CANCEL_OPTION) return;
            }
            toggleMenus(true);
            Thread ascii = new Thread () {
                @Override
                public void run() {
                    try {
                        PrintWriter out = new PrintWriter(file);
                        int option = exportMapList.getSelectedIndex();
                        char asciiMap[] = core.fixAsciiMap(
                                core.setAsciiMaps(option));
                        if(exportColor.isSelected())
                            out.print(core.getColorAsciiHTML(
                                    Integer.parseInt(
                                    exportPxRatio.getText()),
                                    asciiMap,
                                    exportWebSave.isSelected()));
                        else
                            out.print(core.getAsciiHTML(
                                    Integer.parseInt(
                                    exportPxRatio.getText()),
                                    asciiMap,
                                    exportWebSave.isSelected()));
                        out.close();
                    }
                    catch (OutOfMemoryError oom) {
                        
                        error = true;
                    }
                    catch (IOException e) {
                        e.printStackTrace();
                        statusLabel.setText(" Error: Write Error!");
                    }
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            toggleMenus(false);
                        }
                    });
                }
            };
            ascii.start();
        }
        
}//GEN-LAST:event_exportOkAsciiButtonActionPerformed

    private void exportOkTextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportOkTextButtonActionPerformed
        exportAsciiImgFrame.setVisible(false);
        core.selectedLayer = selectedLayer;
        fileChooser.setSelectedFile(new File (imageFile.getPath() + ".html"));
        int returnStatus = fileChooser.showSaveDialog(this);
        if(returnStatus == JFileChooser.APPROVE_OPTION) {
            final File file = fileChooser.getSelectedFile();
            if(file.exists()) {
                returnStatus = JOptionPane.showConfirmDialog (null,
                   "Overwrite existing file?","Confirm Overwrite",
                    JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE);
                if(returnStatus == JOptionPane.CANCEL_OPTION) return;
            }
            toggleMenus(true);
            Thread ascii = new Thread () {
                public void run() {
                    try {
                        PrintWriter out = new PrintWriter(file);
                        String text = exportText.getText();
                        out.print(core.getMsgHTML(
                                Integer.parseInt(
                                exportPxRatio.getText()),
                                text,
                                exportWebSave.isSelected()));
                        out.close();
                    }
                    catch (OutOfMemoryError oom) {
                        
                        error = true;
                    }
                    catch (IOException e) {
                        e.printStackTrace();
                        statusLabel.setText(" Error: Write Error!");
                    }
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            toggleMenus(false);
                        }
                    });
                }
            };
            ascii.start();
        }
}//GEN-LAST:event_exportOkTextButtonActionPerformed

    private void edgeDetectItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgeDetectItemActionPerformed
        core.selectedLayer = selectedLayer;
        toggleMenus(true);
        Thread edgeDetect = new Thread () {
            public void run() {
                try {
                    core.edgeDetect();
                }
                catch (OutOfMemoryError oom) {
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        edgeDetect.start();
    }//GEN-LAST:event_edgeDetectItemActionPerformed

    private void motionBlurItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motionBlurItemActionPerformed
        core.selectedLayer = selectedLayer;
        toggleMenus(true);
        Thread motionBlur = new Thread () {
            public void run() {
                try {
                    core.motionBlur();
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        motionBlur.start();
}//GEN-LAST:event_motionBlurItemActionPerformed

    private void dupLayerItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dupLayerItemActionPerformed
        core.selectedLayer = selectedLayer;
        toggleMenus(true);
        Thread duplicateLayer = new Thread () {
            public void run() {
                try {
                    core.duplicateLayer();
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        duplicateLayer.start();
    }//GEN-LAST:event_dupLayerItemActionPerformed

    private void delLayerItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delLayerItemActionPerformed
        core.selectedLayer = selectedLayer;
        toggleMenus(true);
        Thread discardLayer = new Thread () {
            public void run() {
                try {
                    core.discardLayer();
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        if(selectedLayer > 0) {
                            selectedLayer--;
                        }
                        toggleMenus(false);
                    }
                });
            }
        };
        discardLayer.start();
    }//GEN-LAST:event_delLayerItemActionPerformed

    private void toggleVisLayerItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleVisLayerItemActionPerformed
        core.selectedLayer = selectedLayer;
        toggleMenus(true);
        Thread toggleVisible = new Thread () {
            public void run() {
                try {
                    core.toggleVisible();
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        toggleVisible.start();
}//GEN-LAST:event_toggleVisLayerItemActionPerformed

    private void nLayerItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nLayerItemActionPerformed
        selectedLayer++;
        core.selectedLayer = selectedLayer;
        toggleMenus(false);
    }//GEN-LAST:event_nLayerItemActionPerformed

    private void pLayerItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pLayerItemActionPerformed
        selectedLayer--;
        core.selectedLayer = selectedLayer;
        toggleMenus(false);
    }//GEN-LAST:event_pLayerItemActionPerformed

    private void upLayerItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upLayerItemActionPerformed
        core.selectedLayer = selectedLayer;
        toggleMenus(true);
        Thread moveUp = new Thread () {
            public void run() {
                try {
                    core.moveUp();
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        selectedLayer++;
                        toggleMenus(false);
                    }
                });
            }
        };
        moveUp.start();

    }//GEN-LAST:event_upLayerItemActionPerformed

    private void downLayerItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downLayerItemActionPerformed
        core.selectedLayer = selectedLayer;
        toggleMenus(true);
        Thread moveDown = new Thread () {
            public void run() {
                try {
                    core.moveDown();
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        selectedLayer--;
                        toggleMenus(false);
                    }
                });
            }
        };
        moveDown.start();

    }//GEN-LAST:event_downLayerItemActionPerformed

    private void imagePanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imagePanelMouseClicked
        if(layerOptionFrame.isVisible()) {
            float opacy = (float)(layerOpacySlider.getValue())/100.0f;
            core.selectedLayer = selectedLayer;
            core.setOpacy(opacy);
            core.setBlendType(layerBlendOption.getSelectedIndex());
            layerOptionFrame.setVisible(false);
            showImage();
        }
        else if(evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
            core.selectedLayer = selectedLayer;
            layerBlendOption.setSelectedIndex(core.getBlendType());
            layerOpacySlider.setValue(core.getOpacy());
            layerOptionFrame.setLocation(evt.getXOnScreen(), evt.getYOnScreen());
            layerOptionFrame.setVisible(true);
        }
            
    }//GEN-LAST:event_imagePanelMouseClicked

    private void waterEffectItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waterEffectItemActionPerformed
        core.selectedLayer = selectedLayer;
        amplitudeSlider.setMaximum(core.getLayerWidth());
        centerFrame(waveFrame);
        waveFrame.setVisible(true);
    }//GEN-LAST:event_waterEffectItemActionPerformed

    private void waveOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waveOkButtonActionPerformed

        waveFrame.setVisible(false);
        core.selectedLayer = selectedLayer;
        toggleMenus(true);
        Thread waveEffect = new Thread () {
            @Override
            public void run() {
                try {
                    core.waveEffect(
                            freqSlider.getValue(), amplitudeSlider.getValue());
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        waveEffect.start();
}//GEN-LAST:event_waveOkButtonActionPerformed

    private void waveCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waveCancelButtonActionPerformed
        waveFrame.setVisible(false);
}//GEN-LAST:event_waveCancelButtonActionPerformed

    private void oilEffectItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oilEffectItemActionPerformed
        centerFrame(oilPaintFrame);
        oilPaintFrame.setVisible(true);
    }//GEN-LAST:event_oilEffectItemActionPerformed

    private void imageMosaicItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageMosaicItemActionPerformed
        centerFrame(imgMosaicFrame);
        imageFiles = null;
        folder = null;
        imgMosaicFrame.setVisible(true);
    }//GEN-LAST:event_imageMosaicItemActionPerformed

    private void imgMosaicProcessImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imgMosaicProcessImgActionPerformed
        imageFiles = null;
        folder = null;
        fileChooserB.setDialogTitle("Select Images Folder");
        int returnStatus = fileChooserB.showOpenDialog(this);
        if(returnStatus == JFileChooser.APPROVE_OPTION) {
            imageFiles = fileChooserB.getSelectedFile().listFiles();
            fileChooserB.setDialogTitle(
                    "Select the Mosaic Data Folder");
            returnStatus = fileChooserB.showOpenDialog(this);
            if(returnStatus == JFileChooser.APPROVE_OPTION) {
                folder = fileChooserB.getSelectedFile();
            }
        }
        if(imageFiles != null && folder != null) {
            imgMosaicFrame.setVisible(false);
            core.selectedLayer = selectedLayer;
            toggleMenus(true);
            Thread imgPreProcess = new Thread () {
                @Override
                public void run() {
                    try {
                        core.processImages(
                            imageFiles,
                            folder,
                            Integer.parseInt(imgMosaicWidth.getText()),
                            Integer.parseInt(imgMosaicHeight.getText()));
                        imageFiles = null;
                    }
                    catch (OutOfMemoryError oom) {
                        
                        error = true;
                    }
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            showImage();
                            toggleMenus(false);
                            fileChooser.setMultiSelectionEnabled(false);
                            imgMosaicFrame.setVisible(true);
                        }
                    });
                }
            };
            imgPreProcess.start();
        }
    }//GEN-LAST:event_imgMosaicProcessImgActionPerformed

    private void invertItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invertItemActionPerformed
        core.selectedLayer = selectedLayer;
        toggleMenus(true);
        Thread invert = new Thread () {
            @Override
            public void run() {
                try {
                    core.invert();
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        invert.start();
}//GEN-LAST:event_invertItemActionPerformed

    private void imgMosaicProcessMosaicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imgMosaicProcessMosaicActionPerformed
        imgMosaicFrame.setVisible(false);
        core.selectedLayer = 0;
        core.flattenLayers();
        if(folder == null) {
            fileChooserB.setDialogTitle("Select the Mosaic Data Folder");
            int returnStatus = fileChooserB.showOpenDialog(this);
            if(returnStatus == JFileChooser.APPROVE_OPTION) {
                folder = fileChooserB.getSelectedFile();
            }
        }
        if(folder != null) {
            toggleMenus(true);
            Thread processImageMosaic = new Thread () {
                @Override
                public void run() {
                    try {
                        String name = imageFile.getName();
                        name = name.substring(0, name.lastIndexOf('.'));
                        if(name.length() == 0) name = "output";
                        core.processImageMosaic(folder, name,
                            Float.parseFloat(imgMosaicScaleText.getText())/100f,
                            imgMosaicBlendCheck.isSelected(),
                            imgMosaicBlendAmount.getValue()/100f,
                            imgMosaicJitterAmount.getValue());
                    }
                    catch (OutOfMemoryError oom) {
                        
                        error = true;
                    }
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            showImage();
                            toggleMenus(false);
                            System.gc();
                        }
                    });
                }
            };
            processImageMosaic.start();
        }
    }//GEN-LAST:event_imgMosaicProcessMosaicActionPerformed

    private void imgMosaicCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imgMosaicCancelActionPerformed
        imgMosaicFrame.setVisible(false);
    }//GEN-LAST:event_imgMosaicCancelActionPerformed

    private void flattenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flattenMenuItemActionPerformed
        selectedLayer = 0;
        core.selectedLayer = selectedLayer;
        toggleMenus(true);
        Thread flattenLayers = new Thread () {
            @Override
            public void run() {
                try {
                    core.flattenLayers();
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        flattenLayers.start();
    }//GEN-LAST:event_flattenMenuItemActionPerformed

    private void imgMosaicBlendCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imgMosaicBlendCheckActionPerformed
        if(imgMosaicBlendCheck.isSelected()) {
            imgMosaicBlendAmount.setEnabled(true);
        }
        else {
            imgMosaicBlendAmount.setEnabled(false);
        }
    }//GEN-LAST:event_imgMosaicBlendCheckActionPerformed

    private void oilPaintOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oilPaintOkButtonActionPerformed
        oilPaintFrame.setVisible(false);
        core.selectedLayer = selectedLayer;
        toggleMenus(true);
        Thread oilPaintEffect = new Thread () {
            @Override
            public void run() {
                try {
                    core.oilPaintEffect(oilPaintPasses.getValue(),
                            Integer.parseInt(oilPaintBrushSize.getText()),
                            Integer.parseInt(oilPaintPalette.getText()));
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        oilPaintEffect.start();
    }//GEN-LAST:event_oilPaintOkButtonActionPerformed

    private void oilPaintCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oilPaintCancelButtonActionPerformed
        oilPaintFrame.setVisible(false);
    }//GEN-LAST:event_oilPaintCancelButtonActionPerformed

    private void exportOkAsciiButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportOkAsciiButton1ActionPerformed
        exportAsciiImgFrame.setVisible(false);
    }//GEN-LAST:event_exportOkAsciiButton1ActionPerformed

    private void flipHItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flipHItemActionPerformed
        toggleMenus(true);
        Thread flipH = new Thread () {
            @Override
            public void run() {
                try {
                    core.flipH();
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        flipH.start();
    }//GEN-LAST:event_flipHItemActionPerformed

    private void flipVItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flipVItemActionPerformed
        toggleMenus(true);
        Thread flipV = new Thread () {
            @Override
            public void run() {
                try {
                    core.flipV();
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        flipV.start();
    }//GEN-LAST:event_flipVItemActionPerformed

    private void rotate180ItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotate180ItemActionPerformed
        toggleMenus(true);
        Thread rot180 = new Thread () {
            @Override
            public void run() {
                try {
                    core.rotate180();
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        rot180.start();
    }//GEN-LAST:event_rotate180ItemActionPerformed

    private void rotateCWItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateCWItemActionPerformed
        toggleMenus(true);
        Thread rotCW = new Thread () {
            @Override
            public void run() {
                try {
                    core.rotateCW();
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        rotCW.start();
    }//GEN-LAST:event_rotateCWItemActionPerformed

    private void rotateCCWItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateCCWItemActionPerformed
        toggleMenus(true);
        Thread rotCCW = new Thread () {
            @Override
            public void run() {
                try {
                    core.rotateCCW();
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        rotCCW.start();
    }//GEN-LAST:event_rotateCCWItemActionPerformed

    private void resizeOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resizeOkButtonActionPerformed
        resizeFrame.setVisible(false);
        toggleMenus(true);
        Thread resize = new Thread () {
            @Override
            public void run() {
                try {
                    int width = Integer.parseInt(resizeWidth.getText());
                    int height = Integer.parseInt(resizeHeight.getText());
                    core.resize(width, height);
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        resize.start();
    }//GEN-LAST:event_resizeOkButtonActionPerformed

    private void resizeLayerItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resizeLayerItemActionPerformed
        centerFrame(resizeFrame);
        resizeWidth.setText("" + core.canvasWidth);
        resizeHeight.setText("" + core.canvasHeight);
        resizeWidthpC.setText("" + 100);
        resizeHeightpC.setText("" + 100);
        resizeFrame.setVisible(true);
    }//GEN-LAST:event_resizeLayerItemActionPerformed

    private void resizeWidthpCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resizeWidthpCActionPerformed
        double w = core.canvasWidth;
        double h = core.canvasHeight;
        double s = Integer.parseInt(resizeWidthpC.getText())/100.0d;

        if(resizeAspectCheck.isSelected()) {
            resizeWidth.setText("" + (int)(core.canvasWidth*s));
            resizeHeight.setText("" + (int)(core.canvasHeight*s));
            resizeHeightpC.setText(resizeWidthpC.getText());
        }
        else {
            resizeWidth.setText("" + (int)(core.canvasWidth*s));
        }
    }//GEN-LAST:event_resizeWidthpCActionPerformed

    private void resizeHeightpCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resizeHeightpCActionPerformed
        double w = core.canvasWidth;
        double h = core.canvasHeight;
        double s = Integer.parseInt(resizeHeightpC.getText())/100.0d;

        if(resizeAspectCheck.isSelected()) {
            resizeHeight.setText("" + (int)(core.canvasHeight*s));
            resizeWidth.setText("" + (int)(core.canvasWidth*s));
            resizeWidthpC.setText(resizeHeightpC.getText());
        }
        else {
            resizeHeight.setText("" + (int)(core.canvasHeight*s));
        }
    }//GEN-LAST:event_resizeHeightpCActionPerformed

    private void resizeWidthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resizeWidthActionPerformed
        double w = core.canvasWidth;
        double h = core.canvasHeight;

        double s = Integer.parseInt(resizeWidth.getText())/w;

        if(resizeAspectCheck.isSelected()) {
            resizeHeight.setText("" + (int)(core.canvasHeight*s));
            resizeWidthpC.setText("" + (int)(s*100));
            resizeHeightpC.setText(resizeWidthpC.getText());
        }
        else {
            resizeWidthpC.setText("" + (int)(s*100));
        }
    }//GEN-LAST:event_resizeWidthActionPerformed

    private void resizeHeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resizeHeightActionPerformed
        double w = core.canvasWidth;
        double h = core.canvasHeight;

        double s = Integer.parseInt(resizeHeight.getText())/h;

        if(resizeAspectCheck.isSelected()) {
            resizeWidth.setText("" + (int)(core.canvasWidth*s));
            resizeHeightpC.setText("" + (s*100));
            resizeWidthpC.setText(resizeHeightpC.getText());
        }
        else {
            resizeHeightpC.setText("" + (int)(s*100));
        }
    }//GEN-LAST:event_resizeHeightActionPerformed

    private void resizeCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resizeCancelButtonActionPerformed
        resizeFrame.setVisible(false);
    }//GEN-LAST:event_resizeCancelButtonActionPerformed

    private void flatten2LayerItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flatten2LayerItemActionPerformed
        core.selectedLayer = selectedLayer;
        toggleMenus(true);
        Thread flatten2Layer = new Thread () {
            @Override
            public void run() {
                try {
                    core.flatten2NewLayer();
                }
                catch (OutOfMemoryError oom) {
                    
                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                        selectedLayer = 0;
                    }
                });
            }
        };
        flatten2Layer.start();
}//GEN-LAST:event_flatten2LayerItemActionPerformed

    private void mergeDownItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mergeDownItemActionPerformed
        core.selectedLayer = selectedLayer;
        toggleMenus(true);
        Thread mergeDown = new Thread () {
            @Override
            public void run() {
                try {
                    core.mergeDown();
                }
                catch (OutOfMemoryError oom) {

                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        mergeDown.start();
}//GEN-LAST:event_mergeDownItemActionPerformed

    private void embossItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_embossItemActionPerformed
        core.selectedLayer = selectedLayer;
        toggleMenus(true);
        Thread emboss = new Thread () {
            @Override
            public void run() {
                try {
                    core.emboss();
                }
                catch (OutOfMemoryError oom) {

                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        emboss.start();
}//GEN-LAST:event_embossItemActionPerformed

    private void stereogramItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stereogramItemActionPerformed
        core.selectedLayer = selectedLayer;
        toggleMenus(true);
        Thread stereoGram = new Thread () {
            @Override
            public void run() {
                try {
                    core.stereoGram(64);
                }
                catch (OutOfMemoryError oom) {

                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        stereoGram.start();
}//GEN-LAST:event_stereogramItemActionPerformed

    private void asciiStereogramItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_asciiStereogramItemActionPerformed
    core.selectedLayer = selectedLayer;
    fileChooser.setSelectedFile(new File (imageFile.getPath() + "_3D.txt"));
    int returnStatus = fileChooser.showSaveDialog(this);
    if(returnStatus == JFileChooser.APPROVE_OPTION) {
        final File file = fileChooser.getSelectedFile();
        if(file.exists()) {
            returnStatus = JOptionPane.showConfirmDialog (null,
               "Overwrite existing file?","Confirm Overwrite",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE);
            if(returnStatus == JOptionPane.CANCEL_OPTION) return;
        }
        toggleMenus(true);
        Thread asciiStereogram = new Thread () {
            @Override
            public void run() {
                try {
                    PrintWriter out = new PrintWriter(file);
                    out.print(core.asciiStereoGram());
                    out.close();
                }
                catch (OutOfMemoryError oom) {

                    error = true;
                }
                catch (IOException e) {
                    e.printStackTrace();
                    statusLabel.setText(" Error: Write Error!");
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        toggleMenus(false);
                    }
                });
            }
        };
        asciiStereogram.start();
    }
}//GEN-LAST:event_asciiStereogramItemActionPerformed

    private void bwItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bwItemActionPerformed
        core.selectedLayer = selectedLayer;
        toggleMenus(true);
        Thread bw = new Thread () {
            @Override
            public void run() {
                try {
                    core.bw();
                }
                catch (OutOfMemoryError oom) {

                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        bw.start();
}//GEN-LAST:event_bwItemActionPerformed

    private void ditherTonesItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ditherTonesItemActionPerformed
        centerFrame(posterizeFrame);
        posterizeFrame.setVisible(true);
}//GEN-LAST:event_ditherTonesItemActionPerformed

    private void ditherOptionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ditherOptionButtonActionPerformed
        noDitherOptionButton.setSelected(false);
        ditherOptionButton.setSelected(true);
        dithergOptionButton.setSelected(false);
        halfCircleOptionButton.setSelected(false);
        halfLineOptionButton.setSelected(false);
    }//GEN-LAST:event_ditherOptionButtonActionPerformed

    private void funcTestItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_funcTestItemActionPerformed
        toggleMenus(true);
        core.selectedLayer = selectedLayer;
        core.halftone(8, false);
        showImage();
        toggleMenus(false);
    }//GEN-LAST:event_funcTestItemActionPerformed

    private void halfCircleOptionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_halfCircleOptionButtonActionPerformed
        noDitherOptionButton.setSelected(false);
        ditherOptionButton.setSelected(false);
        dithergOptionButton.setSelected(false);
        halfCircleOptionButton.setSelected(true);
        halfLineOptionButton.setSelected(false);
    }//GEN-LAST:event_halfCircleOptionButtonActionPerformed

    private void halfLineOptionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_halfLineOptionButtonActionPerformed
        noDitherOptionButton.setSelected(false);
        ditherOptionButton.setSelected(false);
        dithergOptionButton.setSelected(false);
        halfCircleOptionButton.setSelected(false);
        halfLineOptionButton.setSelected(true);
    }//GEN-LAST:event_halfLineOptionButtonActionPerformed

    private void ditherTonesApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ditherTonesApplyButtonActionPerformed
        posterizeFrame.setVisible(false);
        core.selectedLayer = selectedLayer;
        toggleMenus(true);
        Thread grayPosterize = new Thread () {
            @Override
            public void run() {
                try {
                    int levels =
                            Integer.parseInt(patternSizeText.getText());
                    if(levels < 1) levels = 1;
                    if(levels > 255) levels = 255;
                    
                    if(noDitherOptionButton.isSelected())
                        core.posterize(levels);
                    if(ditherOptionButton.isSelected())
                        core.ditheredPosterize(levels);
                    if(dithergOptionButton.isSelected()) {
                        core.desaturate(1, 1, 1);
                        core.ditheredPosterize(levels);
                        core.bypassLastState();
                    }
                    if(halfCircleOptionButton.isSelected())
                        core.halftone(levels, true);
                    if(halfLineOptionButton.isSelected())
                        core.halftone(levels, false);
                }
                catch (OutOfMemoryError oom) {

                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        grayPosterize.start();
}//GEN-LAST:event_ditherTonesApplyButtonActionPerformed

    private void ditherTonesCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ditherTonesCancelButtonActionPerformed
        posterizeFrame.setVisible(false);
    }//GEN-LAST:event_ditherTonesCancelButtonActionPerformed

    private void dithergOptionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dithergOptionButtonActionPerformed
        noDitherOptionButton.setSelected(false);
        ditherOptionButton.setSelected(false);
        dithergOptionButton.setSelected(true);
        halfCircleOptionButton.setSelected(false);
        halfLineOptionButton.setSelected(false);
}//GEN-LAST:event_dithergOptionButtonActionPerformed

    private void unSharpMaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unSharpMaskActionPerformed
        core.selectedLayer = selectedLayer;
        toggleMenus(true);
        Thread unsharpMask = new Thread () {
            @Override
            public void run() {
                try {
                    core.duplicateLayer();
                    core.duplicateLayer();
                    core.moreBlur();
                    core.setBlendType(2);
                    core.mergeDown();
                    core.setBlendType(1);
                    core.mergeDownIntoLayer();
                }
                catch (OutOfMemoryError oom) {

                    error = true;
                }
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        showImage();
                        toggleMenus(false);
                    }
                });
            }
        };
        unsharpMask.start();
    }//GEN-LAST:event_unSharpMaskActionPerformed

    private void noDitherOptionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noDitherOptionButtonActionPerformed
        noDitherOptionButton.setSelected(true);
        ditherOptionButton.setSelected(false);
        dithergOptionButton.setSelected(false);
        halfCircleOptionButton.setSelected(false);
        halfLineOptionButton.setSelected(false);
}//GEN-LAST:event_noDitherOptionButtonActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    UIManager.setLookAndFeel(
                            UIManager.getSystemLookAndFeelClassName());
                }
                catch (Exception e){
                    e.printStackTrace();
                }
                new ImpGui().setVisible(true);
            }
        });
    }

    private ImpCore core = new ImpCore();
    private int selectedLayer;
    private float scale = 1.0f;

    int screen_w =
        (int)(Toolkit.getDefaultToolkit().getScreenSize().getWidth());
    int screen_h =
        (int)(Toolkit.getDefaultToolkit().getScreenSize().getHeight());

    BufferedImage image;
    JLabel statusLabel = new JLabel(" Ready");
    JProgressBar pbar = new JProgressBar();
    Boolean error = false;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar ImpMenuBar;
    private javax.swing.JButton aboutClose;
    private javax.swing.JFrame aboutFrame;
    private javax.swing.JMenuItem aboutItem;
    private javax.swing.JMenu aboutMenuItem;
    private javax.swing.JPanel aboutPanel;
    private javax.swing.JScrollPane aboutScroll;
    private javax.swing.JTextArea aboutText;
    private javax.swing.JLabel aboutTitle;
    private javax.swing.JSlider amplitudeSlider;
    private javax.swing.JMenuItem asciiStereogramItem;
    private javax.swing.JPanel bbncPanel;
    private javax.swing.JSlider bbncSlider;
    private javax.swing.JTextField bbncText;
    private javax.swing.JLabel blueLabel;
    private javax.swing.JPanel bluePanel;
    private javax.swing.JSlider blueSlider;
    private javax.swing.JTextField blueText;
    private javax.swing.JMenuItem blurItem;
    private javax.swing.JMenu blurMenuItem;
    private javax.swing.JButton bncApplyButton;
    private javax.swing.JButton bncCancelButton;
    private javax.swing.JPanel bncContent;
    private javax.swing.JFrame bncFrame;
    private javax.swing.JLabel bncTitle;
    private javax.swing.JMenuItem brightNContrastItem;
    private javax.swing.JMenuItem bwItem;
    private javax.swing.JPanel cbncPanel;
    private javax.swing.JSlider cbncSlider;
    private javax.swing.JTextField cbncText;
    private javax.swing.JButton colorApplyButton;
    private javax.swing.JMenuItem colorBalanceItem;
    private javax.swing.JButton colorCancelButton;
    private javax.swing.JColorChooser colorChooser;
    private javax.swing.JFrame colorFrame;
    private javax.swing.JPanel colorPanel;
    private javax.swing.JLabel colorTitle;
    private javax.swing.JMenuItem colorizeItem;
    private javax.swing.JMenuItem delLayerItem;
    private javax.swing.JMenuItem desaturateItem;
    private javax.swing.JRadioButton ditherOptionButton;
    private javax.swing.JButton ditherTonesApplyButton;
    private javax.swing.JButton ditherTonesCancelButton;
    private javax.swing.JMenuItem ditherTonesItem;
    private javax.swing.JPanel ditherTonesOptionBPanel;
    private javax.swing.JPanel ditherTonesTitlePanel;
    private javax.swing.JRadioButton dithergOptionButton;
    private javax.swing.JMenuItem downLayerItem;
    private javax.swing.JMenuItem dupLayerItem;
    private javax.swing.JMenuItem edgeDetectItem;
    private javax.swing.JMenu editMenuItem;
    private javax.swing.JMenu effectMenuItem;
    private javax.swing.JMenuItem embossItem;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JFrame exportAsciiImgFrame;
    private javax.swing.JMenuItem exportAsciiItem;
    private javax.swing.JCheckBox exportColor;
    private javax.swing.JLabel exportMapLabel;
    private javax.swing.JComboBox exportMapList;
    private javax.swing.JMenu exportMenuItem;
    private javax.swing.JLabel exportMsgLabel;
    private javax.swing.JButton exportOkAsciiButton;
    private javax.swing.JButton exportOkAsciiButton1;
    private javax.swing.JButton exportOkTextButton;
    private javax.swing.JPanel exportPanel;
    private javax.swing.JTextField exportPxRatio;
    private javax.swing.JLabel exportPxRatioLabel;
    private javax.swing.JTextField exportText;
    private javax.swing.JLabel exportTitle;
    private javax.swing.JLabel exportTitle1;
    private javax.swing.JLabel exportTitle2;
    private javax.swing.JCheckBox exportWebSave;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JFileChooser fileChooserB;
    private javax.swing.JMenu fileMenuItem;
    private javax.swing.JMenu filtersMenuItem;
    private javax.swing.JMenuItem flatten2LayerItem;
    private javax.swing.JMenuItem flattenMenuItem;
    private javax.swing.JMenuItem flipHItem;
    private javax.swing.JMenuItem flipVItem;
    private javax.swing.JPanel frameContentPanel1;
    private javax.swing.JSlider freqSlider;
    private javax.swing.JMenuItem funcTestItem;
    private javax.swing.JLabel grayPosterizeTitle;
    private javax.swing.JLabel greenLabel;
    private javax.swing.JPanel greenPanel;
    private javax.swing.JSlider greenSlider;
    private javax.swing.JTextField greenText;
    private javax.swing.JLabel hSizeMosaicLabel;
    private javax.swing.JTextField hSizeMosaicText;
    private javax.swing.JRadioButton halfCircleOptionButton;
    private javax.swing.JRadioButton halfLineOptionButton;
    private javax.swing.JLabel hpxLabel;
    private javax.swing.JPanel imageFrame;
    private javax.swing.JMenuItem imageMosaicItem;
    private org.jdesktop.swingx.JXImagePanel imagePanel;
    private javax.swing.JSlider imgMosaicBlendAmount;
    private javax.swing.JCheckBox imgMosaicBlendCheck;
    private javax.swing.JButton imgMosaicCancel;
    private javax.swing.JFrame imgMosaicFrame;
    private javax.swing.JLabel imgMosaicFrameTitle;
    private javax.swing.JTextField imgMosaicHeight;
    private javax.swing.JLabel imgMosaicHeightLabel;
    private javax.swing.JSlider imgMosaicJitterAmount;
    private javax.swing.JLabel imgMosaicJitterLabel;
    private javax.swing.JPanel imgMosaicOptions;
    private javax.swing.JPanel imgMosaicPanel;
    private javax.swing.JPanel imgMosaicPreOptions;
    private javax.swing.JButton imgMosaicProcessImg;
    private javax.swing.JButton imgMosaicProcessMosaic;
    private javax.swing.JLabel imgMosaicScaleLabel;
    private javax.swing.JTextField imgMosaicScaleText;
    private javax.swing.JTextField imgMosaicWidth;
    private javax.swing.JLabel imgMosaicWidthLabel;
    private org.jdesktop.swingx.JXStatusBar impStatusBar;
    private javax.swing.JMenuItem invertItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JComboBox layerBlendOption;
    private javax.swing.JMenu layerMenuItem;
    private javax.swing.JSlider layerOpacySlider;
    private javax.swing.JFrame layerOptionFrame;
    private javax.swing.JPanel layerOptionPanel;
    private javax.swing.JLabel layerOptionText;
    private javax.swing.JLabel layerOptionText1;
    private javax.swing.JMenuItem mergeDownItem;
    private javax.swing.JMenuItem moreBlurItem;
    private javax.swing.JMenuItem moreSharpenItem;
    private javax.swing.JButton mosaicApplyButton;
    private javax.swing.JButton mosaicCancelButton;
    private javax.swing.JPanel mosaicContent;
    private javax.swing.JFrame mosaicFrame;
    private javax.swing.JMenuItem mosaicItem;
    private javax.swing.JPanel mosaicPanel;
    private javax.swing.JLabel mosaicTitle;
    private javax.swing.JMenuItem motionBlurItem;
    private javax.swing.JMenuItem nLayerItem;
    private javax.swing.JRadioButton noDitherOptionButton;
    private javax.swing.JMenuItem oilEffectItem;
    private javax.swing.JTextField oilPaintBrushSize;
    private javax.swing.JButton oilPaintCancelButton;
    private javax.swing.JFrame oilPaintFrame;
    private javax.swing.JButton oilPaintOkButton;
    private javax.swing.JTextField oilPaintPalette;
    private javax.swing.JPanel oilPaintPanel;
    private javax.swing.JSlider oilPaintPasses;
    private javax.swing.JLabel oilPaintPassesLabel;
    private javax.swing.JLabel oilPaintSizeLabel;
    private javax.swing.JLabel oiloPaintPaletteLabel;
    private javax.swing.JMenuItem openItem;
    private javax.swing.JMenuItem pLayerItem;
    private javax.swing.JLabel patternSize;
    private javax.swing.JTextField patternSizeText;
    private javax.swing.JFrame posterizeFrame;
    private javax.swing.JMenuItem recMosaicItem;
    private javax.swing.JButton recurMosaicApplyButton;
    private javax.swing.JButton recurMosaicCancelButton;
    private javax.swing.JPanel recurMosaicContent;
    private javax.swing.JFrame recurMosaicFrame;
    private javax.swing.JLabel recurMosaicIScaleLabel;
    private javax.swing.JTextField recurMosaicIScaleText;
    private javax.swing.JLabel recurMosaicMScaleLabel;
    private javax.swing.JTextField recurMosaicMScaleText;
    private javax.swing.JLabel recurMosaicPCentLabel1;
    private javax.swing.JLabel recurMosaicPCentLabel2;
    private javax.swing.JPanel recurMosaicPanel;
    private javax.swing.JLabel recurMosaicTitle;
    private javax.swing.JLabel redLabel;
    private javax.swing.JPanel redPanel;
    private javax.swing.JSlider redSlider;
    private javax.swing.JTextField redText;
    private javax.swing.JMenuItem redoItem;
    private javax.swing.JCheckBox resizeAspectCheck;
    private javax.swing.JButton resizeCancelButton;
    private javax.swing.JFrame resizeFrame;
    private javax.swing.JTextField resizeHeight;
    private javax.swing.JLabel resizeHeightLabel;
    private javax.swing.JTextField resizeHeightpC;
    private javax.swing.JLabel resizeHpcLabel;
    private javax.swing.JMenuItem resizeLayerItem;
    private javax.swing.JButton resizeOkButton;
    private javax.swing.JPanel resizeOptionPanel;
    private javax.swing.JPanel resizePanel;
    private javax.swing.JLabel resizeTitle;
    private javax.swing.JTextField resizeWidth;
    private javax.swing.JLabel resizeWidthLabel;
    private javax.swing.JTextField resizeWidthpC;
    private javax.swing.JLabel resizeWpcLabel;
    private javax.swing.JMenuItem rotate180Item;
    private javax.swing.JMenuItem rotateCCWItem;
    private javax.swing.JMenuItem rotateCWItem;
    private javax.swing.JMenuItem saveAsItem;
    private javax.swing.JMenuItem saveItem;
    private javax.swing.JScrollPane scrollPanel;
    private javax.swing.JMenuItem sharpenItem;
    private javax.swing.JMenu sharpenMenuItem;
    private javax.swing.JMenuItem stereogramItem;
    private javax.swing.JMenuItem toggleVisLayerItem;
    private javax.swing.JMenu transMenuItem;
    private javax.swing.JMenuItem unSharpMask;
    private javax.swing.JMenuItem undoItem;
    private javax.swing.JMenuItem upLayerItem;
    private javax.swing.JLabel vSizeMosaicLabel;
    private javax.swing.JTextField vSizeMosaicText;
    private javax.swing.JMenu viewMenuItem;
    private javax.swing.JLabel vpxLabel;
    private javax.swing.JMenuItem waterEffectItem;
    private javax.swing.JLabel waveAmp;
    private javax.swing.JButton waveCancelButton;
    private javax.swing.JFrame waveFrame;
    private javax.swing.JLabel waveFreqLabel;
    private javax.swing.JButton waveOkButton;
    private javax.swing.JPanel waveOptionPanel;
    private javax.swing.JPanel wavePanel;
    private javax.swing.JLabel waveTitle;
    private javax.swing.JMenuItem zoom11Item;
    private javax.swing.JMenuItem zoomFitItem;
    private javax.swing.JMenuItem zoomInItem;
    private javax.swing.JMenuItem zoomOutItem;
    // End of variables declaration//GEN-END:variables

}
